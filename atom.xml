<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chy&#39;s blog</title>
  
  <subtitle>chy&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chy-2003.github.io/"/>
  <updated>2019-07-09T10:34:10.487Z</updated>
  <id>http://chy-2003.github.io/</id>
  
  <author>
    <name>chy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>左偏树</title>
    <link href="http://chy-2003.github.io/2019/07/09/18/"/>
    <id>http://chy-2003.github.io/2019/07/09/18/</id>
    <published>2019-07-09T09:53:19.000Z</published>
    <updated>2019-07-09T10:34:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>其实左偏树挺简单的。顾名思义，就是向左偏的树。至于为什么左偏，目的就是方便两个堆的合并了。</p><p>然后开始之前，学过平衡树的同学一定要牢记这是个堆，而不是排序二叉树。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>$\bullet$ 首先，左偏树是一个堆。</p><p>$\bullet$ 定义一个点的深度为它到距它最近的没有右子节点的节点的距离。</p><p>$\bullet$ 左子节点的深度大于等于右子节点的深度。</p></blockquote><p>所以我们比较显然的可以知道，根节点的深度不超过$\lfloor \log_2(n+1)\rfloor-1$。</p><p>一个左偏树的节点，我们需要维护左子节点LeftChild、右子节点RightChild和值Value。同时由于要求堆顶，我们还需要知道$parent$信息。</p><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>设我们有两个节点数分别为$n1​$，$n2​$的小根堆，堆顶为$x​$，$y​$。现在我们需要将其合并成一个堆。我们利用上述左偏树的性质，可以得到这样的方法：</p><blockquote><p>1、比较$x.Value$和$y.Value$的大小，如果$y.Value&lt;x.Value$，则交换$x$和$y$。令$x$为新的堆顶。</p><p>2、合并$x.RightChild$和$y$，并将返回的堆顶作为$x$的新$RightChild$。</p><p>3、返回新堆顶$x$。</p></blockquote><p>这样实际上就完成了合并过程。而为了保持左偏树的性质，应该在$2$之后插入如下操作：</p><blockquote><p>比较$x.LeftChild$的深度和$x.RightChild$的深度，如果不满足左偏性质，就交换两颗子树。</p><p>更新$x$的深度。</p></blockquote><p>不难发现，这个过程是$O(\log n)$。</p><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>直接将新插入的点看做一个堆merge即可。时间复杂度$O(\log n)$</p><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>删除堆顶，将两个子树merge即可。时间复杂度$O(\log n)$。</p><h3 id="findRoot"><a href="#findRoot" class="headerlink" title="findRoot"></a>findRoot</h3><p>findRoot可真是个麻烦的操作，同时也是左偏树的毒瘤之处所在。</p><p>我们发现，如果只是简单的跳parent的话，这个时间复杂度可能会被卡满，也就是$O(n)$。因为左偏树保证的深度并不是树的深度。</p><p>但是我们发现，其实我们并不需要详细的每个parent，我们只需要知道堆顶就可以了。这样是不是就可以用类似于并查集路径压缩的手段来加速了？然后findRoot的时间复杂度就被大大降低了。这样，整个左偏树的时间复杂度就得到了保证。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><p><a href="https://www.luogu.org/problemnew/show/P3377" target="_blank" rel="noopener">题目链接</a></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">struct</span> value <span class="token punctuation">{</span>    <span class="token keyword">int</span> Pos<span class="token punctuation">,</span> Value<span class="token punctuation">;</span>    bool operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> value Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Value <span class="token operator">&lt;</span> Other<span class="token punctuation">.</span>Value <span class="token operator">||</span> Value <span class="token operator">==</span> Other<span class="token punctuation">.</span>Value <span class="token operator">&amp;&amp;</span> Pos <span class="token operator">&lt;</span> Other<span class="token punctuation">.</span>Pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool operator <span class="token operator">></span> <span class="token punctuation">(</span> <span class="token keyword">const</span> value Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Value <span class="token operator">></span> Other<span class="token punctuation">.</span>Value <span class="token operator">||</span> Value <span class="token operator">==</span> Other<span class="token punctuation">.</span>Value <span class="token operator">&amp;&amp;</span> Pos <span class="token operator">></span> Other<span class="token punctuation">.</span>Pos<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    value Value<span class="token punctuation">;</span>    <span class="token keyword">int</span> Father<span class="token punctuation">,</span> LeftChild<span class="token punctuation">,</span> RightChild<span class="token punctuation">,</span> Deep<span class="token punctuation">,</span> Del<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">;</span>node Node<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">==</span> x <span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Union</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token operator">&amp;&amp;</span> Node<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token punctuation">)</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> y <span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">></span> Node<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Last <span class="token operator">=</span> x<span class="token punctuation">;</span> x <span class="token operator">=</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild<span class="token punctuation">;</span>    <span class="token keyword">int</span> Opt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> x <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token operator">></span> Node<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Value <span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token operator">=</span> x<span class="token punctuation">;</span>        Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> Last<span class="token punctuation">;</span>        Last <span class="token operator">=</span> x<span class="token punctuation">;</span>        x <span class="token operator">=</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token operator">=</span> y<span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> Last<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">!=</span> Last<span class="token punctuation">;</span> Last <span class="token operator">=</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">&lt;</span> Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild<span class="token punctuation">,</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">=</span> Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">&lt;</span> Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token punctuation">)</span>        <span class="token function">swap</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild<span class="token punctuation">,</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">=</span> Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> Last <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Last<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Del</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"-1\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Value <span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild<span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild<span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> <span class="token function">Union</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>LeftChild<span class="token punctuation">,</span> Node<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>RightChild <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Node<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Node <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>Del <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Value <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Pos <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> i<span class="token punctuation">,</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Deep <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> Opt<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Opt <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Opt <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Union</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Opt <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Del</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实左偏树挺简单的。顾名思义，就是向左偏的树。至于为什么左偏，目的就是方便两个堆的合并了。&lt;/p&gt;
&lt;p&gt;然后开始之前，学过平衡树的同学一定要牢记这是个堆，而不是排序二叉树。&lt;/p&gt;
&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="ACM训练" scheme="http://chy-2003.github.io/categories/ACM%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="可并堆" scheme="http://chy-2003.github.io/tags/%E5%8F%AF%E5%B9%B6%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>CF682E Alyona and Triangles</title>
    <link href="http://chy-2003.github.io/2019/07/08/17/"/>
    <id>http://chy-2003.github.io/2019/07/08/17/</id>
    <published>2019-07-08T13:55:31.000Z</published>
    <updated>2019-07-08T14:09:30.799Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/682/E" target="_blank" rel="noopener">题目链接</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>比较显然的是一定从“最大三角形面积不超过$S$”这一点来入手。</p><p><img src="/2019/07/08/17/1.png" alt="1"></p><p>如上图，如果$A,B,C$三点构成的是面积最大的三角形，我们就可以知道，$C$是到直线$AB$最远的点。所以不可能有点在过点$C$平行与$AB$的直线外面。同样的，另外$3$点也有类似的结论。所以所有的点都应该在图中最大的三角形上及内部。</p><p>然后这个大三角形恰好又是面积最大三角形面积的$4$倍，这样问题就得到了解决。</p><p>至于如何求面积最大的三角形，就直接求一个凸包，枚举两个点，用类似于旋转卡壳的手段求面积即可。时间复杂度$O(n^2)$。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LD long double</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">5010</span><span class="token punctuation">;</span><span class="token keyword">const</span> LD Eps <span class="token operator">=</span> <span class="token number">1e-12</span><span class="token punctuation">;</span>LD <span class="token function">sqr</span><span class="token punctuation">(</span> LD x <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Compare</span><span class="token punctuation">(</span> LD x<span class="token punctuation">,</span> LD y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fabs</span><span class="token punctuation">(</span> x <span class="token operator">-</span> y <span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Eps <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">></span> y <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> point <span class="token punctuation">{</span>    LD x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    point operator <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> point Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span> point <span class="token punctuation">)</span> <span class="token punctuation">{</span> Other<span class="token punctuation">.</span>x <span class="token operator">+</span> x<span class="token punctuation">,</span> Other<span class="token punctuation">.</span>y <span class="token operator">+</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    point operator <span class="token operator">-</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> point Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span> point <span class="token punctuation">)</span> <span class="token punctuation">{</span> x <span class="token operator">-</span> Other<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> Other<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    LD operator <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> point Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y <span class="token operator">*</span> Other<span class="token punctuation">.</span>x <span class="token operator">-</span> x <span class="token operator">*</span> Other<span class="token punctuation">.</span>y<span class="token punctuation">;</span> <span class="token punctuation">}</span>    LD operator <span class="token operator">/</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> point Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span> <span class="token function">sqr</span><span class="token punctuation">(</span> Other<span class="token punctuation">.</span>x <span class="token operator">-</span> x <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sqr</span><span class="token punctuation">(</span> Other<span class="token punctuation">.</span>y <span class="token operator">-</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    bool operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> point Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Compare</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> Other<span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> Other<span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Compare</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> Other<span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    bool operator <span class="token operator">==</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> point Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Compare</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> Other<span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Compare</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> Other<span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span>LD S<span class="token punctuation">;</span>point A<span class="token punctuation">[</span> Maxn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Stack<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token punctuation">;</span>LD MaxArea<span class="token punctuation">;</span>bool <span class="token function">Comperation1</span><span class="token punctuation">(</span> point x<span class="token punctuation">,</span> point y <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>bool <span class="token function">Comperation2</span><span class="token punctuation">(</span> point x<span class="token punctuation">,</span> point y <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Compare</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> x <span class="token operator">-</span> A<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> y <span class="token operator">-</span> A<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ConvexHull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span> A <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> A <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Comperation1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">sort</span><span class="token punctuation">(</span> A <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> A <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Comperation2 <span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> Stack<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Stack<span class="token punctuation">[</span> <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Compare</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span>  <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Stack<span class="token punctuation">[</span> <span class="token operator">++</span>Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> N <span class="token operator">=</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">GetMaxArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token operator">-</span> N <span class="token punctuation">]</span><span class="token punctuation">;</span>    MaxArea <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> Top <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token function">Compare</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> Top <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> Top <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Compare</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> Top <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> Top <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token operator">++</span>Top<span class="token punctuation">;</span>            LD Area <span class="token operator">=</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> Top <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            Area <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span> Area <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> Area<span class="token punctuation">,</span> MaxArea <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                MaxArea <span class="token operator">=</span> Area<span class="token punctuation">;</span>                T1 <span class="token operator">=</span> i<span class="token punctuation">;</span> T2 <span class="token operator">=</span> j<span class="token punctuation">;</span> T3 <span class="token operator">=</span> Top<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%Lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>S <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%Lf%Lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ConvexHull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GetMaxArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    point Ans1 <span class="token operator">=</span> A<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> T3 <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    point Ans2 <span class="token operator">=</span> A<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> T3 <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    point Ans3 <span class="token operator">=</span> A<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> T3 <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Ans3 <span class="token operator">==</span> Ans2 <span class="token operator">||</span> Ans3 <span class="token operator">==</span> Ans1 <span class="token punctuation">)</span> Ans3 <span class="token operator">=</span> A<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span> <span class="token operator">-</span> A<span class="token punctuation">[</span> T3 <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Ans1<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Ans1<span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Ans2<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Ans2<span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Ans3<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Ans3<span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/682/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class
      
    
    </summary>
    
      <category term="ACM训练" scheme="http://chy-2003.github.io/categories/ACM%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="计算几何" scheme="http://chy-2003.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>CF605C Freelancer&#39;s Dreams</title>
    <link href="http://chy-2003.github.io/2019/07/06/16/"/>
    <id>http://chy-2003.github.io/2019/07/06/16/</id>
    <published>2019-07-06T13:52:23.000Z</published>
    <updated>2019-07-08T14:09:40.635Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/problemset/problem/605/C" target="_blank" rel="noopener">题目链接</a></p><h2 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h2><p>把这个问题放到平面上。考虑如果总量为$1$能组成哪些$p$和$q$。那么两个点能组成的就是由这两个点为端点的线段。同理，三个点就是三角形，多个点就是这些点的凸包为边界的多边形。</p><p>于是我们只需要求经过点$(p,q)$的射线与凸包的交点。如果有多个，则取到原点距离较长的那一段。那么答案就是点$(p,q)$到原点的距离比上交点到原点的距离。</p><p>如果没有交点，那么说明我们无法构造出恰好为$(p,q)$的方案。那么我们加入两个点$(man_x,0)$与$(0,max_y)$，剩下做法同上这样就可以了。</p><h2 id="解题思路2"><a href="#解题思路2" class="headerlink" title="解题思路2"></a>解题思路2</h2><p>由于问题是在平面内，所以由于线性关系，我们最多选择两种。这点通过上面那种做法也可以看出。那么做出凸包后用两个指针扫一遍也是可以的。<del>然而并没有具体实现过</del></p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><p>思路1的程序</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LD long double</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> LD Eps <span class="token operator">=</span> <span class="token number">1e-12</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">struct</span> point <span class="token punctuation">{</span>    LD x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>LD p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>point A<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Appear<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Stack<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">Compare</span><span class="token punctuation">(</span> LD x<span class="token punctuation">,</span> LD y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fabs</span><span class="token punctuation">(</span> x <span class="token operator">-</span> y <span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Eps <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">></span> y <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%Lf%Lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>q <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%Lf%Lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>    A<span class="token punctuation">[</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> A<span class="token punctuation">[</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>             A<span class="token punctuation">[</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>    <span class="token operator">++</span>N<span class="token punctuation">;</span>    A<span class="token punctuation">[</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> A<span class="token punctuation">[</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>             A<span class="token punctuation">[</span> N <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token operator">++</span>N<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Cmp</span><span class="token punctuation">(</span> point x<span class="token punctuation">,</span> point y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Compare</span><span class="token punctuation">(</span> x<span class="token punctuation">.</span>x <span class="token operator">*</span> y<span class="token punctuation">.</span>y <span class="token operator">-</span> x<span class="token punctuation">.</span>y <span class="token operator">*</span> y<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LD <span class="token function">Dis</span><span class="token punctuation">(</span> LD x<span class="token punctuation">,</span> LD y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span> x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LD <span class="token function">Cross</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> A<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> A<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> A<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> A<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">TuBao</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    Stack<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Stack<span class="token punctuation">[</span> <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> <span class="token function">Cross</span><span class="token punctuation">(</span> i<span class="token punctuation">,</span> Stack<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Stack<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">--</span>Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        Stack<span class="token punctuation">[</span> <span class="token operator">++</span>Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span> A <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> A <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Cmp <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">TuBao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    N <span class="token operator">=</span> Stack<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">/</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> p <span class="token operator">/</span> q <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.10Lf\n"</span><span class="token punctuation">,</span> <span class="token function">Dis</span><span class="token punctuation">(</span> p<span class="token punctuation">,</span> q <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Dis</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">*</span> q <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">Compare</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">*</span> q <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Compare</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.10Lf\n"</span><span class="token punctuation">,</span> p <span class="token operator">/</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LD T1<span class="token punctuation">,</span> T2<span class="token punctuation">;</span>            T1 <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span> <span class="token operator">*</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>            T2 <span class="token operator">=</span> q <span class="token operator">/</span> p <span class="token operator">-</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>            LD X <span class="token operator">=</span> T1 <span class="token operator">/</span> T2<span class="token punctuation">;</span>            LD Y <span class="token operator">=</span> X <span class="token operator">*</span> q <span class="token operator">/</span> p<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.10Lf\n"</span><span class="token punctuation">,</span> <span class="token function">Dis</span><span class="token punctuation">(</span> p<span class="token punctuation">,</span> q <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">Dis</span><span class="token punctuation">(</span> X<span class="token punctuation">,</span> Y <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="最后的问题"><a href="#最后的问题" class="headerlink" title="最后的问题"></a>最后的问题</h3><p>程序中求凸包部分，如果判出三点共线的情况，那么需要删除中间那个点才可以，不然会<code>Wrong Answer On Test 12</code>。不知为何。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/problemset/problem/605/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解题思路1&quot;&gt;&lt;a href=&quot;#解题思路1&quot; cla
      
    
    </summary>
    
      <category term="ACM训练" scheme="http://chy-2003.github.io/categories/ACM%E8%AE%AD%E7%BB%83/"/>
    
    
      <category term="计算几何" scheme="http://chy-2003.github.io/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>「NOI2007」 货币兑换</title>
    <link href="http://chy-2003.github.io/2019/05/15/15/"/>
    <id>http://chy-2003.github.io/2019/05/15/15/</id>
    <published>2019-05-14T17:49:22.000Z</published>
    <updated>2019-05-14T18:15:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2353" target="_blank" rel="noopener">题目链接</a></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先$60$分的DP比较容易。<br>$$<br>F_i=max\{F_{i-1},F_j\times\frac{A_iRate_j+B_i}{A_jRate_j+B_j}(1\leqslant j &lt; i)\}<br>$$<br>然后考虑如何优化。</p><p>我们发现，如果最终<br>$$<br>F_i=F_j\times\frac{A_iRate_j+B_i}{A_jRate_j+B_j}<br>$$<br>那么可以化成<br>$$<br>\frac{F_i}{B_i}=\frac{F_jRate_j}{A_jRate_j+B_j}\times\frac{A_i}{B_i}+\frac{F_j}{A_jRate_j+B_j}<br>$$<br>这是个$y=kx+b$的形式。我们不妨令<br>$$<br>k_j=\frac{F_jRate_j}{A_jRate_j+B_j}\\<br>b_j=\frac{F_j}{A_jRate_j+B_j}<br>$$<br>而如果从$i$转移到$t$优于从$j$转移到$t$，那么就有<br>$$<br>k_i\frac{A_t}{B_t}+b_i=k_j\frac{A_t}{B_t}+b_j<br>$$</p><p>$$<br>-\frac{A_t}{B_t}&lt;\frac{b_i-b_j}{k_i-k_j}\,\,\,\,(k_i&gt;k_j)<br>$$</p><p>那么就可以斜率优化了。具体的解释可以看程序的注释。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> Eps <span class="token operator">=</span> <span class="token number">1e-9</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">double</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> Rate<span class="token punctuation">,</span> k<span class="token punctuation">,</span> b<span class="token punctuation">,</span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> Id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//k,b的意义如问题分析中所讲，s=-A/B</span>node Node<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Temp<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> F<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> Stack<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Size<span class="token punctuation">;</span>bool <span class="token function">Cmp</span><span class="token punctuation">(</span> node x<span class="token punctuation">,</span> node y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span>s <span class="token operator">></span> y<span class="token punctuation">.</span>s<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意不要写x.s+Eps>y.s。这样可能会导致std::sort爆RE。或者可以写成!(x.s&lt;y.s+Eps)</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">Sl</span><span class="token punctuation">(</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//返回斜率</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fabs</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">-</span> Node<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token punctuation">)</span> <span class="token operator">&lt;</span> Eps <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1e20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第6、7个点卡精度需求</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> Node<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">-</span> Node<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span> Node<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">-</span> Node<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Work</span><span class="token punctuation">(</span> <span class="token keyword">int</span> Left<span class="token punctuation">,</span> <span class="token keyword">int</span> Right <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Left <span class="token operator">==</span> Right <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果只有一个数，那么就可以直接运算。同时确定k和b</span>        F<span class="token punctuation">[</span> Left <span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">max</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> Left <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> F<span class="token punctuation">[</span> Left <span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span> Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">*</span> Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>Rate <span class="token operator">+</span> Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>B <span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">=</span> Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">*</span> Node<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">.</span>Rate<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> Mid <span class="token operator">=</span> <span class="token punctuation">(</span> Left <span class="token operator">+</span> Right <span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> T1 <span class="token operator">=</span> Left<span class="token punctuation">,</span> T2 <span class="token operator">=</span> Mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//按时间分治，分成前后两部分</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Id <span class="token operator">&lt;=</span> Mid <span class="token punctuation">)</span>             Temp<span class="token punctuation">[</span> T1<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             Temp<span class="token punctuation">[</span> T2<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Temp<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Work</span><span class="token punctuation">(</span> Left<span class="token punctuation">,</span> Mid <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先求出左边</span>    Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Mid<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> Size <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Sl</span><span class="token punctuation">(</span> Stack<span class="token punctuation">[</span> Size <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Stack<span class="token punctuation">[</span> Size <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">Sl</span><span class="token punctuation">(</span> Stack<span class="token punctuation">[</span> Size <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token punctuation">)</span> <span class="token operator">+</span> Eps <span class="token punctuation">)</span> <span class="token operator">--</span>Size<span class="token punctuation">;</span>        Stack<span class="token punctuation">[</span> <span class="token operator">++</span>Size <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//维护一个上凸的凸包</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> T <span class="token operator">&lt;</span> Size <span class="token operator">&amp;&amp;</span> <span class="token function">Sl</span><span class="token punctuation">(</span> Stack<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">,</span> Stack<span class="token punctuation">[</span> T <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">+</span> Eps <span class="token operator">></span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token punctuation">)</span> <span class="token operator">++</span>T<span class="token punctuation">;</span>        F<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Id <span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">max</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Id <span class="token punctuation">]</span><span class="token punctuation">,</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>B <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token operator">-</span>Node<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> T <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">*</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">+</span> Node<span class="token punctuation">[</span> Stack<span class="token punctuation">[</span> T <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用左边的答案来更新右边的答案</span>    <span class="token function">Work</span><span class="token punctuation">(</span> Mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Right <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//然后继续求右边</span>    T <span class="token operator">=</span> T1 <span class="token operator">=</span> Left<span class="token punctuation">;</span> T2 <span class="token operator">=</span> Mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> T1 <span class="token operator">&lt;=</span> Mid <span class="token operator">&amp;&amp;</span> T2 <span class="token operator">&lt;=</span> Right <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//最后按照k的顺序归并，保证k递增</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">&lt;</span> Node<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">||</span> <span class="token function">fabs</span><span class="token punctuation">(</span> Node<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token operator">-</span> Node<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span><span class="token punctuation">.</span>k <span class="token punctuation">)</span> <span class="token operator">&lt;</span> Eps <span class="token operator">&amp;&amp;</span> Node<span class="token punctuation">[</span> T1 <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">&lt;</span> Node<span class="token punctuation">[</span> T2 <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span>            Temp<span class="token punctuation">[</span> T<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">[</span> T1<span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            Temp<span class="token punctuation">[</span> T<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">[</span> T2<span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> T1 <span class="token operator">&lt;=</span> Mid <span class="token punctuation">)</span>        Temp<span class="token punctuation">[</span> T<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">[</span> T1<span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> T2 <span class="token operator">&lt;=</span> Right <span class="token punctuation">)</span>         Temp<span class="token punctuation">[</span> T<span class="token operator">++</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Node<span class="token punctuation">[</span> T2<span class="token operator">++</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Temp<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>F<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lf%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>A<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>B<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Rate <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token operator">-</span>Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>A <span class="token operator">/</span> Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>B<span class="token punctuation">;</span>        Node<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Id <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">sort</span><span class="token punctuation">(</span> Node <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Node <span class="token operator">+</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Cmp <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//首先按s排序，保证CDQ分治时s是降序的。</span>    <span class="token function">Work</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> N <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> N <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2353&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DP" scheme="http://chy-2003.github.io/tags/DP/"/>
    
      <category term="CDQ分治" scheme="http://chy-2003.github.io/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>ACG002D - Stamp Rally</title>
    <link href="http://chy-2003.github.io/2019/05/13/14/"/>
    <id>http://chy-2003.github.io/2019/05/13/14/</id>
    <published>2019-05-12T22:39:39.000Z</published>
    <updated>2019-05-12T22:48:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc002/tasks/agc002_d" target="_blank" rel="noopener">题目链接</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>如果对于单个询问，显然我们可以二分答案来做。然后我们就可以整体二分了。</p><p>整体二分的思想是这样的：</p><blockquote><p>首先二分一个答案，对于所有询问都判断一遍，然后按照需求分成两部分。之后对于每个部分都进行同样的操作。</p></blockquote><p>对于这道题目，我们需要用并查集维护连通性。而如果是DFS顺序的话，我们就需要用到可删边的并查集。这样的时间复杂度是$O(n\log^2n)$的。然而我们可以用BFS来做，并且保持每一个深度边数递增，这样就可以直接使用普通的并查集了。时间复杂度$O(n\log n)$。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> Q<span class="token punctuation">;</span><span class="token keyword">struct</span> query <span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> Index<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>query Query<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Temp<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> X<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Ans<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Father<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Size<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> rec <span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> Deep<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>rec Rec<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> L<span class="token punctuation">,</span> R<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> Father<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    Father<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> Father<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Father<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Union</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> b <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    Size<span class="token punctuation">[</span> a <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> Size<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">;</span>    Father<span class="token punctuation">[</span> b <span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>X<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Y<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Q <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Q<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>z <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Q<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Index <span class="token operator">=</span> i<span class="token punctuation">;</span>    L <span class="token operator">=</span> R <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    R <span class="token operator">=</span> <span class="token punctuation">(</span> R <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> Maxn<span class="token punctuation">;</span>    Rec<span class="token punctuation">[</span> R <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> rec <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Q<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> LastDeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> LastEdge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> L <span class="token operator">!=</span> R <span class="token punctuation">)</span> <span class="token punctuation">{</span>        L <span class="token operator">=</span> <span class="token punctuation">(</span> L <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> Maxn<span class="token punctuation">;</span>        rec Work <span class="token operator">=</span> Rec<span class="token punctuation">[</span> L <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Work<span class="token punctuation">.</span>l <span class="token operator">></span> Work<span class="token punctuation">.</span>r <span class="token operator">||</span> Work<span class="token punctuation">.</span>L <span class="token operator">></span> Work<span class="token punctuation">.</span>R <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Work<span class="token punctuation">.</span>l <span class="token operator">==</span> Work<span class="token punctuation">.</span>r <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Work<span class="token punctuation">.</span>L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Work<span class="token punctuation">.</span>R<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>                Ans<span class="token punctuation">[</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>Index <span class="token punctuation">]</span> <span class="token operator">=</span> Work<span class="token punctuation">.</span>l<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Work<span class="token punctuation">.</span>Deep <span class="token operator">!=</span> LastDeep <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>                Father<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                Size<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            LastDeep <span class="token operator">=</span> Work<span class="token punctuation">.</span>Deep<span class="token punctuation">;</span>            LastEdge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span> Work<span class="token punctuation">.</span>l <span class="token operator">+</span> Work<span class="token punctuation">.</span>r <span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> LL <span class="token operator">=</span> Work<span class="token punctuation">.</span>L <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> RR <span class="token operator">=</span> Work<span class="token punctuation">.</span>R <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> LastEdge <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">Union</span><span class="token punctuation">(</span> X<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> Y<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        LastEdge <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Work<span class="token punctuation">.</span>L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Work<span class="token punctuation">.</span>R<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">GetFather</span><span class="token punctuation">(</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> y <span class="token punctuation">)</span> t <span class="token operator">=</span> Size<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">else</span> t <span class="token operator">=</span> Size<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token operator">+</span> Size<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> t <span class="token operator">&lt;</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>z <span class="token punctuation">)</span>                 Temp<span class="token punctuation">[</span> <span class="token operator">++</span>LL <span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                Temp<span class="token punctuation">[</span> <span class="token operator">--</span>RR <span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Work<span class="token punctuation">.</span>L<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Work<span class="token punctuation">.</span>R<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            Query<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Temp<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        R <span class="token operator">=</span> <span class="token punctuation">(</span> R <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> Maxn<span class="token punctuation">;</span>        Rec<span class="token punctuation">[</span> R <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> rec <span class="token punctuation">)</span> <span class="token punctuation">{</span> Work<span class="token punctuation">.</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> RR<span class="token punctuation">,</span> Work<span class="token punctuation">.</span>R<span class="token punctuation">,</span> Work<span class="token punctuation">.</span>Deep <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        R <span class="token operator">=</span> <span class="token punctuation">(</span> R <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">%</span> Maxn<span class="token punctuation">;</span>        Rec<span class="token punctuation">[</span> R <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> rec <span class="token punctuation">)</span> <span class="token punctuation">{</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Work<span class="token punctuation">.</span>r<span class="token punctuation">,</span> Work<span class="token punctuation">.</span>L<span class="token punctuation">,</span> LL<span class="token punctuation">,</span> Work<span class="token punctuation">.</span>Deep <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Q<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> Ans<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/agc002/tasks/agc002_d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; cla
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="整体二分" scheme="http://chy-2003.github.io/tags/%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>「NOI2007」 社交网络</title>
    <link href="http://chy-2003.github.io/2019/05/09/13/"/>
    <id>http://chy-2003.github.io/2019/05/09/13/</id>
    <published>2019-05-09T12:49:56.000Z</published>
    <updated>2019-05-14T16:03:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2352" target="_blank" rel="noopener">题目连接</a></p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>不知道为什么，很自然地就想到了Floyed。然后冷静分析一波，发现就是个简单的DP。</p><p>令$Count[i][j][k]$表示从$i$到$j$经过$k$的最短路条数，同时令$C[i][j]$表示从$i$到$j$的最短路条数。Floyed的过程实际上就是DP的过程。我们走从$i$到$k$再到$j$的时候，要同时维护最短路数。而维护的时候需要枚举每一个点，同时注意点$k$的单独计算即可。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span><span class="token macro property">#<span class="token directive keyword">define</span> LD long double</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> LL Maxn <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>LL N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> Map<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> C<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Count<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Map<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Map <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c <span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span> <span class="token operator">=</span> Map<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        C<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        C<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> LL j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> j <span class="token operator">||</span> i <span class="token operator">==</span> k <span class="token operator">||</span> j <span class="token operator">==</span> k <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> Map<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">==</span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">+</span> Map<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> LL p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>p <span class="token punctuation">)</span>                         <span class="token keyword">if</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> k <span class="token punctuation">)</span>                            Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">*</span> Count<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span>                             Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                    C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">></span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">+</span> Map<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> Map<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">+</span> Map<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> LL p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>p <span class="token punctuation">)</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span> p <span class="token operator">!=</span> k <span class="token punctuation">)</span>                            Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">*</span> Count<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">else</span>                             Count<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> p <span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                    C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> C<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span> <span class="token operator">*</span> C<span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    for( LL i = 1; i &lt;= N; ++i ) {</span><span class="token comment" spellcheck="true">//        for( LL j = 1; j &lt;= N; ++j ) { </span><span class="token comment" spellcheck="true">//            printf( "%lld", Map[ i ][ j ] );</span><span class="token comment" spellcheck="true">//            printf( "(%lld, ", C[ i ][ j ] );</span><span class="token comment" spellcheck="true">//            for( LL k = 1; k &lt; N; ++k ) printf( "%lld ", Count[ i ][ j ][ k ] ); </span><span class="token comment" spellcheck="true">//            printf( "%lld) ", Count[ i ][ j ][ N ] );</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        printf( "\n" );</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LD Ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> LL k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">==</span> j <span class="token operator">||</span> i <span class="token operator">==</span> k <span class="token operator">||</span> j <span class="token operator">==</span> k <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                Ans <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">*</span> Count<span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">/</span> C<span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.3Lf\n"</span><span class="token punctuation">,</span> Ans <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2352&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目连接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DP" scheme="http://chy-2003.github.io/tags/DP/"/>
    
      <category term="最短路" scheme="http://chy-2003.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>「THUWC 2017」在美妙的数学王国中畅游</title>
    <link href="http://chy-2003.github.io/2019/05/07/12/"/>
    <id>http://chy-2003.github.io/2019/05/07/12/</id>
    <published>2019-05-07T12:27:57.000Z</published>
    <updated>2019-05-07T12:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2289" target="_blank" rel="noopener">题目链接</a></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先，有连边删边操作，那么<a href="https://www.cnblogs.com/chy-2003/p/10570224.html" target="_blank" rel="noopener">LCT</a>逃不了了。那么如何维护函数信息？注意到题目末尾的提示，结合题目所给的精度要求，我们取前十几项就可以了。那么我们就只需要维护多项式就行。</p><p>对于第一种函数<br>$$<br>f(x)=\sin(ax+b)\\\\<br>f’(x)=a\cos(ax+b)\\\\<br>f’’(x)=-a^2\sin(ax+b)\\\\<br>f^{(3)}=-a^3\cos(ax+b)<br>$$<br>对于第二种函数<br>$$<br>f(x)=e^{ax+b}\\\\<br>f^{(n)}(x)=a^ne^{ax+b}<br>$$<br>对于第三种函数<br>$$<br>f(x)=ax+b\\\\<br>f’(x)=a\\\\<br>f^{(n)}(x)=0(n&gt;1)<br>$$<br>那么就做完了。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><p><del>常规操作，常规操作。</del></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span>namespace readInformation <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    <span class="token keyword">char</span> Type<span class="token punctuation">[</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> readFuntionType <span class="token punctuation">{</span>        <span class="token keyword">int</span> f<span class="token punctuation">;</span>        <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    readFuntionType Function<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> readOpt <span class="token punctuation">{</span>        <span class="token keyword">char</span> Opt<span class="token punctuation">[</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> c<span class="token punctuation">,</span> f<span class="token punctuation">;</span>        <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> Type <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>             <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Function<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>f<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Function<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Function<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    readOpt <span class="token function">GetOpt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        readOpt Ans<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> Ans<span class="token punctuation">.</span>Opt <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Ans<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>v <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>Ans<span class="token punctuation">.</span>u<span class="token punctuation">;</span> <span class="token operator">++</span>Ans<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Ans<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'d'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>v <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>Ans<span class="token punctuation">.</span>u<span class="token punctuation">;</span> <span class="token operator">++</span>Ans<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Ans<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'m'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%lf%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>f<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>Ans<span class="token punctuation">.</span>c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Ans<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'t'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>u<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Ans<span class="token punctuation">.</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>Ans<span class="token punctuation">.</span>u<span class="token punctuation">;</span> <span class="token operator">++</span>Ans<span class="token punctuation">.</span>v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// readInformation</span>namespace Splay <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> MaxNum <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> splayNode <span class="token punctuation">{</span>        <span class="token keyword">int</span> Father<span class="token punctuation">,</span> Child<span class="token punctuation">[</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> IsReverse<span class="token punctuation">;</span>        <span class="token keyword">double</span> Poly<span class="token punctuation">[</span> MaxNum <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    splayNode Splay<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Stack<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Size<span class="token punctuation">;</span>    bool <span class="token function">IsRoot</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Splay<span class="token punctuation">[</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> x <span class="token operator">&amp;&amp;</span> Splay<span class="token punctuation">[</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>IsReverse <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Collect</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxNum<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>             Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Splay<span class="token punctuation">[</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">+</span> Splay<span class="token punctuation">[</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> Sin <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span><span class="token punctuation">,</span> Cos <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxNum<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> Sin <span class="token operator">*</span> t<span class="token punctuation">;</span> t <span class="token operator">*</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>                       Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> Cos <span class="token operator">*</span> t<span class="token punctuation">;</span> t <span class="token operator">*</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>                       Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> Sin <span class="token operator">*</span> t<span class="token punctuation">;</span> t <span class="token operator">*</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>                       Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">3</span> <span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> Cos <span class="token operator">*</span> t<span class="token punctuation">;</span> t <span class="token operator">*</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>                   <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> Exp <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>            Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> Exp<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxNum<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>                Exp <span class="token operator">*</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>                Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> Exp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>            Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">PushDown</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>IsReverse <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">Reverse</span><span class="token punctuation">(</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Reverse</span><span class="token punctuation">(</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>IsReverse <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Rotate</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father<span class="token punctuation">;</span>        <span class="token keyword">int</span> z <span class="token operator">=</span> Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Father<span class="token punctuation">;</span>        <span class="token keyword">int</span> Tag <span class="token operator">=</span> Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">IsRoot</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span> Splay<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> Splay<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">==</span> y <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> z<span class="token punctuation">;</span>        Splay<span class="token punctuation">[</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> Tag <span class="token operator">^</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> y<span class="token punctuation">;</span>        Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> Tag <span class="token punctuation">]</span> <span class="token operator">=</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> Tag <span class="token operator">^</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> Tag <span class="token operator">^</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>        Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token function">Collect</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Collect</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">splay</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Stack<span class="token punctuation">[</span> <span class="token operator">++</span>Size <span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> <span class="token operator">!</span><span class="token function">IsRoot</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span> t <span class="token operator">=</span> Splay<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token punctuation">)</span> Stack<span class="token punctuation">[</span> <span class="token operator">++</span>Size <span class="token punctuation">]</span> <span class="token operator">=</span> Splay<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">.</span>Father<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> Size<span class="token punctuation">;</span> <span class="token operator">--</span>Size <span class="token punctuation">)</span> <span class="token function">PushDown</span><span class="token punctuation">(</span> Stack<span class="token punctuation">[</span> Size <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">IsRoot</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father<span class="token punctuation">;</span>            <span class="token keyword">int</span> z <span class="token operator">=</span> Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Father<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">IsRoot</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> Splay<span class="token punctuation">[</span> z <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> y <span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span> Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> x <span class="token punctuation">)</span> <span class="token punctuation">)</span>                    <span class="token function">Rotate</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token function">Rotate</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Rotate</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Splay</span>namespace LCT <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">Access</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> Last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x<span class="token punctuation">;</span> Last <span class="token operator">=</span> x<span class="token punctuation">,</span> x <span class="token operator">=</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">splay</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>            Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Last<span class="token punctuation">;</span>            Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Collect</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">MakeRoot</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Access</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">splay</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Reverse</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">FindRoot</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Access</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">splay</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">PushDown</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            x <span class="token operator">=</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>            Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">PushDown</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">splay</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Split</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">MakeRoot</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Access</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">splay</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Link</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">MakeRoot</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">FindRoot</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span> <span class="token operator">==</span> x <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Cut</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">MakeRoot</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">FindRoot</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span> <span class="token operator">!=</span> x <span class="token operator">||</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">||</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">!=</span> x <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">.</span>Father <span class="token operator">=</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">.</span>Child<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Collect</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// LCT</span>namespace Main <span class="token punctuation">{</span>    <span class="token keyword">double</span> Fact<span class="token punctuation">[</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>MaxNum <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Fact<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>MaxNum<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Fact<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Fact<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>m<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>readOpt ReadOpt <span class="token operator">=</span> readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">GetOpt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'a'</span> <span class="token punctuation">)</span> LCT<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Link</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>u<span class="token punctuation">,</span> ReadOpt<span class="token punctuation">.</span>v <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'d'</span> <span class="token punctuation">)</span> LCT<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Cut</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>u<span class="token punctuation">,</span> ReadOpt<span class="token punctuation">.</span>v <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'m'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                 LCT<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">MakeRoot</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>c <span class="token punctuation">)</span><span class="token punctuation">;</span>                 readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> ReadOpt<span class="token punctuation">.</span>c <span class="token punctuation">]</span><span class="token punctuation">.</span>f <span class="token operator">=</span> ReadOpt<span class="token punctuation">.</span>f<span class="token punctuation">;</span>                readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> ReadOpt<span class="token punctuation">.</span>c <span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> ReadOpt<span class="token punctuation">.</span>a<span class="token punctuation">;</span>                readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span>Function<span class="token punctuation">[</span> ReadOpt<span class="token punctuation">.</span>c <span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">=</span> ReadOpt<span class="token punctuation">.</span>b<span class="token punctuation">;</span>                Splay<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Collect</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>c <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>Opt<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'t'</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> LCT<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">FindRoot</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>u <span class="token punctuation">)</span> <span class="token operator">!=</span> LCT<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">FindRoot</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>v <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"unreachable\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                LCT<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Split</span><span class="token punctuation">(</span> ReadOpt<span class="token punctuation">.</span>u<span class="token punctuation">,</span> ReadOpt<span class="token punctuation">.</span>v <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> Ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>MaxNum<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>                     Ans <span class="token operator">+</span><span class="token operator">=</span> Splay<span class="token punctuation">:</span><span class="token punctuation">:</span>Splay<span class="token punctuation">[</span> ReadOpt<span class="token punctuation">.</span>v <span class="token punctuation">]</span><span class="token punctuation">.</span>Poly<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">*</span> x <span class="token operator">/</span> Fact<span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span> x <span class="token operator">*</span> ReadOpt<span class="token punctuation">.</span>x<span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%.8e\n"</span><span class="token punctuation">,</span> Ans <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// Main</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    readInformation<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Main<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2289&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="LCT" scheme="http://chy-2003.github.io/tags/LCT/"/>
    
      <category term="代数" scheme="http://chy-2003.github.io/tags/%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>「THUSC 2016」补退选</title>
    <link href="http://chy-2003.github.io/2019/05/03/11/"/>
    <id>http://chy-2003.github.io/2019/05/03/11/</id>
    <published>2019-05-03T03:46:11.000Z</published>
    <updated>2019-05-03T03:53:39.037Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2291" target="_blank" rel="noopener">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>题意应该算是比较明了。只是有一个坑点在于$(a\times |ANS|+b)\mod c$会爆$int$。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>既然只是简单地查询前缀，我们就建一颗Trie。然后考虑如何解决询问。询问问<code>最早什么时候姓名前缀为S的学生超过了ｘ</code>，于是我们只需在每个节点维护一个单调上升的序列，同时维护时间信息就好了。然后嘛，$vector$能完美地解决这个问题。空间最多是$n*len$的。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MaxLen <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> AlphaSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">struct</span> rec <span class="token punctuation">{</span>    <span class="token keyword">int</span> Val<span class="token punctuation">,</span> Time<span class="token punctuation">;</span>    bool operator <span class="token operator">&lt;</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> rec Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Val <span class="token operator">&lt;</span> Other<span class="token punctuation">.</span>Val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> trie <span class="token punctuation">{</span>    <span class="token keyword">int</span> To<span class="token punctuation">[</span> AlphaSize <span class="token punctuation">]</span><span class="token punctuation">,</span> Num<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span> rec <span class="token operator">></span> Rec<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>trie Trie<span class="token punctuation">[</span> Maxn <span class="token operator">*</span> MaxLen <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> Used<span class="token punctuation">,</span> Root <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> LastAns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Len<span class="token punctuation">;</span><span class="token keyword">char</span> Ch<span class="token punctuation">[</span> MaxLen <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> Root<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> Ch<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>To<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>To<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>Used<span class="token punctuation">;</span>        T <span class="token operator">=</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>To<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">++</span>Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Num<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">[</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>Val <span class="token operator">&lt;</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Num <span class="token punctuation">)</span>             Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> rec <span class="token punctuation">)</span><span class="token punctuation">{</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Num<span class="token punctuation">,</span> k <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> Root<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> Ch<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">;</span>        T <span class="token operator">=</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>To<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">--</span>Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Query</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> T <span class="token operator">=</span> Root<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        T <span class="token operator">=</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>To<span class="token punctuation">[</span> Ch<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>T <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> Temp <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> rec <span class="token punctuation">)</span><span class="token punctuation">{</span> k<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span> <span class="token operator">-</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Temp <span class="token operator">==</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span>Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Trie<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">.</span>Rec<span class="token punctuation">[</span> Temp <span class="token punctuation">]</span><span class="token punctuation">.</span>Time<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> Opt<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Opt <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> Ch <span class="token punctuation">)</span><span class="token punctuation">;</span>        Len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span> Ch <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Opt <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token function">Insert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Opt <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Opt <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> <span class="token keyword">long</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c <span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span> a <span class="token operator">*</span> <span class="token function">abs</span><span class="token punctuation">(</span> LastAns <span class="token punctuation">)</span> <span class="token operator">%</span> c <span class="token operator">+</span> b <span class="token punctuation">)</span> <span class="token operator">%</span> c<span class="token punctuation">;</span>            LastAns <span class="token operator">=</span> <span class="token function">Query</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> LastAns <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2291&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Trie" scheme="http://chy-2003.github.io/tags/Trie/"/>
    
  </entry>
  
  <entry>
    <title>「THUSC 2016」成绩单</title>
    <link href="http://chy-2003.github.io/2019/05/02/10/"/>
    <id>http://chy-2003.github.io/2019/05/02/10/</id>
    <published>2019-05-02T13:39:56.000Z</published>
    <updated>2019-05-02T13:57:06.911Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2292" target="_blank" rel="noopener">题目链接</a></p><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>题面还是比较好理解的。值得注意的是，如果取了中间一段，两边的会连成一段。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>两维的DP看起来是不行的。看到$n$只有$50$，我们 考虑升维。令$F[l][r][A][B]$表示在区间$[l,r]$中，取走一部分，剩余的最小为$A$，最大为$B$的代价；同时令$G[l][r]$表示取走$[l,r]$中所有所需要的代价。</p><p>那么我们有以下转移：<br>$$<br>F[l][r][\min(A,W[r])][max(B,W[r])]=min(F[l][k][A][B]+G[k+1][r-1])<br>$$</p><p>$$<br>G[l][r]=min(F[l][k][A][B]+a+b*(B-A)^2+G[k+1][r])<br>$$</p><p>最后$G[1][n]$就是答案。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> W<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> F<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Ref<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Upd</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> x <span class="token operator">></span> y <span class="token punctuation">)</span> x <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>W<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         Ref<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> W<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span> Ref <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Ref <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         W<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span> Ref <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Ref <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> W<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">-</span> Ref<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> G<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> G <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> F<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> F <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         G<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> W<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> W<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> Len <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> Len <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>Len <span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">+</span> Len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> Len <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> A <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>A <span class="token punctuation">)</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>B <span class="token punctuation">)</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>                             <span class="token function">Upd</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token function">min</span><span class="token punctuation">(</span> A<span class="token punctuation">,</span> W<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token function">max</span><span class="token punctuation">(</span> B<span class="token punctuation">,</span> W<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> A <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>A <span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>B <span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>                        <span class="token function">Upd</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token function">min</span><span class="token punctuation">(</span> A<span class="token punctuation">,</span> W<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token function">max</span><span class="token punctuation">(</span> B<span class="token punctuation">,</span> W<span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> A <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>A <span class="token punctuation">)</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>B <span class="token punctuation">)</span>                         <span class="token keyword">if</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>                            <span class="token function">Upd</span><span class="token punctuation">(</span> G<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> k <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">+</span> G<span class="token punctuation">[</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token punctuation">(</span> Ref<span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">-</span> Ref<span class="token punctuation">[</span> A <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> Ref<span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">-</span> Ref<span class="token punctuation">[</span> A <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> A <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>A <span class="token punctuation">)</span>                <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> B <span class="token operator">=</span> A<span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>B <span class="token punctuation">)</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>                            <span class="token function">Upd</span><span class="token punctuation">(</span> G<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> j <span class="token punctuation">]</span><span class="token punctuation">[</span> A <span class="token punctuation">]</span><span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">+</span> a <span class="token operator">+</span> b <span class="token operator">*</span> <span class="token punctuation">(</span> Ref<span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">-</span> Ref<span class="token punctuation">[</span> A <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> Ref<span class="token punctuation">[</span> B <span class="token punctuation">]</span> <span class="token operator">-</span> Ref<span class="token punctuation">[</span> A <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> n <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://loj.ac/problem/2292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="DP" scheme="http://chy-2003.github.io/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Pollard_Rho</title>
    <link href="http://chy-2003.github.io/2019/04/20/9/"/>
    <id>http://chy-2003.github.io/2019/04/20/9/</id>
    <published>2019-04-20T10:46:50.000Z</published>
    <updated>2019-04-20T14:46:31.740Z</updated>
    
    <content type="html"><![CDATA[<p>注：有参考于<a href="https://www.luogu.org/blog/JasonZhou200337/pollard-rho-suan-fa-jian-jie" target="_blank" rel="noopener">LinearODE的博客</a></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>现有一个问题：如何求一个大数的一个因子（最大、最小、任意一个），而数据范围是64位带符号整形，并且有100次询问。那么枚举显然是不现实的，我们就需要一个更加高效的算法。在学习Pollard_Rho之前，需要先学会<a href="../8/">Miller_Rabin素数测试</a>。</p><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>注：这一部分若未特殊说明，则我们希望分解$n$，并且所有运算都在$\mod n$意义下进行。</p><h3 id="随机采样"><a href="#随机采样" class="headerlink" title="随机采样"></a>随机采样</h3><p>Pollard_Rho算法思想依旧是基于枚举因数。但是不能正常枚举，于是考虑随机化。但是直接随机一个数的话，概率未免太低。而考虑选取两个数，看它们的差，那概率就会大很多（因为第二个数$i+k$和$i-k$都可以）。那么当我们选取足够多的数时，判断其中存在两数相减是我们需要的一个因数的概率就很大了（这得益于组合随机采样，类似于<strong>生日悖论</strong>的原理）。</p><h3 id="Pollard的伪随机数列"><a href="#Pollard的伪随机数列" class="headerlink" title="Pollard的伪随机数列"></a>Pollard的伪随机数列</h3><p>上述的随机采样似乎是一个很好的点子。但是我们需要枚举两两之间的差，并且为了正确性，又需要足够多的随机数（大约可能会接近$O(n^{\frac{1}{4}})$）。这样的话，并没有实质性地对时间复杂度进行优化（依旧接近$O(\sqrt n)$）。</p><p>Pollard设计了这样一个数列：随机两个数$a_0$与$c$，$a_i=a_{i-1}^2+c$。用这个数列代替上面说道的两两枚举差有很好的表现。（LinearODE大佬提到这有关于曼德勃罗集，然而本蒟蒻并不知道，于是就不提了。）</p><p>而由于是在模意义下运算，所以这个数列一定会循环。有趣的是，因为这个数列轨迹像$\rho$，所以算法名就叫做Pollard_Rho。</p><h3 id="用Floyd和Brent’s对算法进行优化"><a href="#用Floyd和Brent’s对算法进行优化" class="headerlink" title="用Floyd和Brent’s对算法进行优化"></a>用Floyd和Brent’s对算法进行优化</h3><p>上面提到，Pollard的伪随机数列一定步数后会循环。那么出现环的时候我们就需要退出。标题中的两个都是不错的算法。</p><p>可以参考<a href="http://www.siafoo.net/algorithm/10" target="_blank" rel="noopener">Floyd判圈</a>，和<a href="http://www.siafoo.net/algorithm/11" target="_blank" rel="noopener">Brent’s判圈</a>。</p><p>下面使用Floyd判圈。</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>通过上面的描述，我相信大家已经可以写出这么一段代码了：</p><pre class=" language-c"><code class="language-c">LL <span class="token function">Pollard_Rho</span><span class="token punctuation">(</span> LL T<span class="token punctuation">,</span> LL Seed <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> x <span class="token operator">-</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">-</span> y <span class="token punctuation">:</span> y <span class="token operator">-</span> x<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> d <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> x <span class="token operator">*</span> x <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>需要注意的是，$x$和$y$的取值范围需要在$0$至$T-1$之间，并且一开始不要$x=f(x), y=f(f(y))$，只要$y=f(y)$就可以了。否则的话这个算法会在$T=4$的时候出现一点问题（$T=4$时最长的循环节长度只有$2​$，所以必须要最前面两项）。</p><p>如果一次不成功，那么改变$Seed$再次尝试即可。</p><h3 id="94分"><a href="#94分" class="headerlink" title="94分"></a>94分</h3><p>到此为止，已经可以在<a href="https://www.luogu.org/problemnew/show/P4718" target="_blank" rel="noopener">【模板】Pollard-Rho算法</a>中获得$94$分了。完整代码如下：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span>using namespace std<span class="token punctuation">;</span>LL <span class="token function">FastPow</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">,</span> LL Mod <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL Ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> y<span class="token punctuation">;</span> y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> x <span class="token operator">*</span> x <span class="token operator">%</span> Mod <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span>            Ans <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> Ans <span class="token operator">*</span> x <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Miller_Rabin</span><span class="token punctuation">(</span> LL n<span class="token punctuation">,</span> LL Times <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    LL m <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> m <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        m <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">++</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Times<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            LL b <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> a <span class="token operator">*</span> a <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">gcd</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL m <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> m <span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> y<span class="token punctuation">;</span> y <span class="token operator">=</span> m<span class="token punctuation">;</span> m <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">Pollard_Rho</span><span class="token punctuation">(</span> LL T<span class="token punctuation">,</span> LL Seed <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> y <span class="token operator">-</span> x <span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> y <span class="token operator">-</span> x <span class="token punctuation">:</span> x <span class="token operator">-</span> y<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> d <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> x <span class="token operator">*</span> x <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span>LL Ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Find</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL Seed <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">&lt;=</span> Ans <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Miller_Rabin</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ans <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL y <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> x <span class="token operator">==</span> y <span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token function">Pollard_Rho</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> Seed<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> x <span class="token operator">%</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span> x <span class="token operator">/</span><span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token function">Find</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> Seed <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Find</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> Seed <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token keyword">unsigned</span> LL <span class="token punctuation">)</span> <span class="token string">"我不相信会卡19260817这个模数"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    LL T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> T<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL x<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>        Ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">Find</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> <span class="token number">19260817</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Ans <span class="token operator">==</span> x <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Prime\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%lld\n"</span><span class="token punctuation">,</span> Ans <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>然后剩下的$6$分去哪里了？（实测最后一个点需要6s+）</p><h3 id="100分"><a href="#100分" class="headerlink" title="100分"></a>100分</h3><p><strong>如果你相信自己的卡常技术，那么可以略过这最后一部分不看了。</strong></p><p>我们发现程序中多次求了$gcd$。而$gcd$的速度不是那么友好。于是我们需要优化。又发现如果$gcd(a,b)&gt;1$，那么一定有$gcd(ac\%b,b)&gt;0$。其中$c&gt;0$。所以我们就可以将一些数打包，然后一起求$gcd$。需要注意的是，$c=0$的情况需要特判。</p><p>所以最后我们就得到了满分代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span>using namespace std<span class="token punctuation">;</span>LL <span class="token function">FastPow</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">,</span> LL Mod <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL Ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> y<span class="token punctuation">;</span> y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> x <span class="token operator">*</span> x <span class="token operator">%</span> Mod <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span>            Ans <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> Ans <span class="token operator">*</span> x <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Miller_Rabin</span><span class="token punctuation">(</span> LL n<span class="token punctuation">,</span> LL Times <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    LL m <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> m <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        m <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">++</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Times<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            LL b <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> a <span class="token operator">*</span> a <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">gcd</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL m <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> m <span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> y<span class="token punctuation">;</span> y <span class="token operator">=</span> m<span class="token punctuation">;</span> m <span class="token operator">=</span> x <span class="token operator">%</span> y<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">Pollard_Rho</span><span class="token punctuation">(</span> LL T<span class="token punctuation">,</span> LL Seed <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    x <span class="token operator">=</span> y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    LL Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> x <span class="token operator">!=</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL Last <span class="token operator">=</span> Mul<span class="token punctuation">;</span>        Mul <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> Mul <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> x <span class="token operator">-</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">?</span> x <span class="token operator">-</span> y <span class="token punctuation">:</span> y <span class="token operator">-</span> x <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span> <span class="token operator">++</span>Cnt<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Mul <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            LL d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span> Last<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Cnt <span class="token operator">==</span> <span class="token number">127</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            LL d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span> Mul<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>            Mul <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> d <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> x <span class="token operator">*</span> x <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> y <span class="token operator">*</span> y <span class="token operator">%</span> T <span class="token operator">+</span> Seed <span class="token punctuation">)</span> <span class="token operator">%</span> T<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Mul <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL d <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span> Mul<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> d <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> T<span class="token punctuation">;</span><span class="token punctuation">}</span>LL Ans<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Find</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL Seed <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">&lt;=</span> Ans <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Miller_Rabin</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        Ans <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL y <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> x <span class="token operator">==</span> y <span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token function">Pollard_Rho</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> Seed<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> x <span class="token operator">%</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span> x <span class="token operator">/</span><span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token function">Find</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> Seed <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">Find</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> Seed <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token keyword">unsigned</span> LL <span class="token punctuation">)</span> <span class="token string">"我不相信会卡19260817这个模数"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    LL T<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>T <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> T<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL x<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x <span class="token punctuation">)</span><span class="token punctuation">;</span>        Ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">Find</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> <span class="token number">19260817</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Ans <span class="token operator">==</span> x <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Prime\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%lld\n"</span><span class="token punctuation">,</span> Ans <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;注：有参考于&lt;a href=&quot;https://www.luogu.org/blog/JasonZhou200337/pollard-rho-suan-fa-jian-jie&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LinearODE的博客&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数论" scheme="http://chy-2003.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Miller_Rabin素数测试</title>
    <link href="http://chy-2003.github.io/2019/04/20/8/"/>
    <id>http://chy-2003.github.io/2019/04/20/8/</id>
    <published>2019-04-20T02:33:04.000Z</published>
    <updated>2019-04-20T14:45:40.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>当我们需要判断一个大数是否为素数，而$O(\sqrt n)$的时间复杂度又不可接受时，就需要用到Miller_Raibin素数测试了。Miller_Rabin素数测试是一种随机算法，但是正确率可以接受。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><h3 id="费马小定理测试"><a href="#费马小定理测试" class="headerlink" title="费马小定理测试"></a>费马小定理测试</h3><p>由费马小定理，我们知道若$p$是素数，那么对于$\forall a\in(0,p)$有$a^{p-1}\equiv 1(\mod p)$。它的逆否命题同样成立。</p><h3 id="二次探测测试"><a href="#二次探测测试" class="headerlink" title="二次探测测试"></a>二次探测测试</h3><p>如果$p$是素数，那么对于方程$a^2\equiv1 (\mod p)$在$a\in(0,p)$中的解只有$a=1$或$a=p-1$。它的逆否命题成立。</p><h3 id="Miller-Rabin"><a href="#Miller-Rabin" class="headerlink" title="Miller_Rabin"></a>Miller_Rabin</h3><p>假设我们现在判定$n$是否为素数。</p><p>首先排除$n&lt;2$和$n\equiv0(\mod 2)$的情况。现在$n$是一个正奇数，那么$n-1$一定是一个正偶数。</p><p>我们可以把$n-1$写成$m*2^p$，其中$m$是正奇数，$p$是正整数。</p><p>然后选定多个底$a\in (1,p)$，进行费马小定理测试和对$(a^m)^2,(a^{2m})^2,(a^{2^2m})^2,\cdots,(a^{2^{p-1}m})^2$进行二次探测测试。</p><p>如果选定不同$a$的个数为$T$，那么Miller_Rabin出错的概率是$(\frac{1}{4})^T$。当$T$较大时就可以承受了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span>using namespace std<span class="token punctuation">;</span>LL <span class="token function">FastPow</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y<span class="token punctuation">,</span> LL Mod <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL Ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> y<span class="token punctuation">;</span> y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> x <span class="token operator">*</span> x <span class="token operator">%</span> Mod <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span>            Ans <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> Ans <span class="token operator">*</span> x <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Miller_Rabin</span><span class="token punctuation">(</span> LL n<span class="token punctuation">,</span> LL Times <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    LL m <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token punctuation">(</span> m <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        m <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">++</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Times<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL a <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> p<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            LL b <span class="token operator">=</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span> __int128 <span class="token punctuation">)</span> a <span class="token operator">*</span> a <span class="token operator">%</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> a <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">srand</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token keyword">unsigned</span> LL <span class="token punctuation">)</span> <span class="token string">"应该不会卡19260817"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    LL n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Miller_Rabin</span><span class="token punctuation">(</span> n<span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"Y\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"N\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;当我们需要判断一个大数是否为素数，而$O(\sqrt n)$的时间复杂度又不可接受时，就需要用到Miller_Raibin素数测试了。Mil
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="数论" scheme="http://chy-2003.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>最小割树</title>
    <link href="http://chy-2003.github.io/2019/04/19/7/"/>
    <id>http://chy-2003.github.io/2019/04/19/7/</id>
    <published>2019-04-19T08:57:49.000Z</published>
    <updated>2019-04-20T14:45:26.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>解决问题<a href="https://loj.ac/problem/2042" target="_blank" rel="noopener">「CQOI2016」不同的最小割</a>。</p><h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>最小割树用于解决一类多点之间最小割的问题。luogu上的题：<a href="https://www.luogu.org/problemnew/show/P4897" target="_blank" rel="noopener">【模板】最小割树（Gomory-Hu Tree）</a>。然后我们借助这道模板题来看看如何实现。</p><p>首先我们选择两个点$x$和$y$，求出它们的最小割。它们的最小割把点集分成了两个部分$U$和$V$。然后对于任意$x’\in U$和$y’\in V$，都有$x’$与$y’$之间的最小割不大于$x$和$y$之间的最小割（反证法易证）。这样我们可以在$U$和$V$之间连一条权值为$x$到$y$最小割的边，然后对集合$U$和$V$分别进行类似操作，我们就得到了一棵最小割树。容易发现两个点之间的最小割就是它们树上简单路径上权值最小边的权值。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>我们发现每次连一条边，都需要求一次最小割。而边总共有$n-1$条。如果使用$Dinic$或$ISAP$，那么理论时间复杂度上限为$O(n^3m)$。<del>可以无视，谁叫它的上界那么松。</del>同样的，如果使用$HLPP$，那么理论上限就是$O(n^3\sqrt m)$。<del>但是对于随机数据，ISAP的表现远好于HLPP。</del></p><h2 id="解决目标的最后一步"><a href="#解决目标的最后一步" class="headerlink" title="解决目标的最后一步"></a>解决目标的最后一步</h2><p>前面提到，两个点之间的最小割就是它们树上简单路径上权值最小边的权值，那么对于模板题，只需要再套一层倍增即可。而对于目标题我们甚至不需要把树建出来，只需要统计不同的边权即可。</p><h3 id="参考代码（【模板】最小割树（Gomory-Hu-Tree））"><a href="#参考代码（【模板】最小割树（Gomory-Hu-Tree））" class="headerlink" title="参考代码（【模板】最小割树（Gomory-Hu Tree））"></a>参考代码（【模板】最小割树（Gomory-Hu Tree））</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxm <span class="token operator">=</span> <span class="token number">1510</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MaxLog <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> Q<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> P<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> Start<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Cur<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> To<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Flow<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> NowFlow<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Used<span class="token punctuation">;</span><span class="token keyword">int</span> Start_<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Next_<span class="token punctuation">[</span> Maxn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> To_<span class="token punctuation">[</span> Maxn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Val_<span class="token punctuation">[</span> Maxn <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Used_<span class="token punctuation">,</span> D<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">[</span> MaxLog <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Deep_<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> Deep<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Dis<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> Queue<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">AddEdge</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span>Used<span class="token punctuation">;</span>    Next<span class="token punctuation">[</span> Used <span class="token punctuation">]</span> <span class="token operator">=</span> Start<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">;</span>    To<span class="token punctuation">[</span> Used <span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>    Flow<span class="token punctuation">[</span> Used <span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    Start<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token operator">=</span> Used<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">AddEdge_</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span>Used_<span class="token punctuation">;</span>    Next_<span class="token punctuation">[</span> Used_ <span class="token punctuation">]</span> <span class="token operator">=</span> Start_<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">;</span>    To_<span class="token punctuation">[</span> Used_ <span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>    Val_<span class="token punctuation">[</span> Used_ <span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    Start_<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token operator">=</span> Used_<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Bfs</span><span class="token punctuation">(</span> <span class="token keyword">int</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span> T <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Deep<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Deep <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Dis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Dis <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Deep<span class="token punctuation">[</span> S <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    L <span class="token operator">=</span> R <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Queue<span class="token punctuation">[</span> <span class="token operator">++</span>R <span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> L <span class="token operator">&lt;</span> R <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> Queue<span class="token punctuation">[</span> <span class="token operator">++</span>L <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> t <span class="token operator">=</span> Start<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">=</span> Next<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> To<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> Deep<span class="token punctuation">[</span> v <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            Deep<span class="token punctuation">[</span> v <span class="token punctuation">]</span> <span class="token operator">=</span> Deep<span class="token punctuation">[</span> u <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            Queue<span class="token punctuation">[</span> <span class="token operator">++</span>R <span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Deep<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> Rest<span class="token punctuation">,</span> <span class="token keyword">int</span> T <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> u <span class="token operator">==</span> T <span class="token operator">||</span> Rest <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> Rest<span class="token punctuation">;</span>    <span class="token keyword">int</span> Ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>t <span class="token operator">=</span> Cur<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">=</span> Next<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> To<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Deep<span class="token punctuation">[</span> v <span class="token punctuation">]</span> <span class="token operator">!=</span> Deep<span class="token punctuation">[</span> u <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span> Rest<span class="token punctuation">,</span> NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">;</span> NowFlow<span class="token punctuation">[</span> t <span class="token operator">^</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span>        Ans <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span> Rest <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Rest <span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Dinic</span><span class="token punctuation">(</span> <span class="token keyword">int</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span> T <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> Ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span> NowFlow<span class="token punctuation">,</span> Flow<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Flow <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">Bfs</span><span class="token punctuation">(</span> S<span class="token punctuation">,</span> T <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span> Cur<span class="token punctuation">,</span> Start<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> S<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> d <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ans <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> S<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span> <span class="token keyword">int</span> Left<span class="token punctuation">,</span> <span class="token keyword">int</span> Right <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Left <span class="token operator">>=</span> Right <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">Dinic</span><span class="token punctuation">(</span> Q<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">,</span> Q<span class="token punctuation">[</span> Left <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AddEdge_</span><span class="token punctuation">(</span> Q<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">,</span> Q<span class="token punctuation">[</span> Left <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> t <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Bfs</span><span class="token punctuation">(</span> Q<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span>  Left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> Deep<span class="token punctuation">[</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>            P<span class="token punctuation">[</span> <span class="token operator">++</span>t <span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Cut <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Deep<span class="token punctuation">[</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>            P<span class="token punctuation">[</span> <span class="token operator">++</span>t <span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> P<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Build</span><span class="token punctuation">(</span> Left<span class="token punctuation">,</span> Cut <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Build</span><span class="token punctuation">(</span> Cut <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Right <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Build_</span><span class="token punctuation">(</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> Fa<span class="token punctuation">,</span> <span class="token keyword">int</span> c <span class="token punctuation">)</span> <span class="token punctuation">{</span>    D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> Fa<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxLog<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> D<span class="token punctuation">[</span> D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>    D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MaxLog<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> D<span class="token punctuation">[</span> D<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Deep_<span class="token punctuation">[</span> u <span class="token punctuation">]</span> <span class="token operator">=</span> Deep_<span class="token punctuation">[</span> Fa <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> t <span class="token operator">=</span> Start_<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">;</span> t<span class="token punctuation">;</span> t <span class="token operator">=</span> Next_<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> To_<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> v <span class="token operator">==</span> Fa <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">Build_</span><span class="token punctuation">(</span> v<span class="token punctuation">,</span> u<span class="token punctuation">,</span> Val_<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Query</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> Ans <span class="token operator">=</span> INF<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Deep_<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token operator">&lt;</span> Deep_<span class="token punctuation">[</span> y <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> MaxLog <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Deep_<span class="token punctuation">[</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token operator">>=</span> Deep_<span class="token punctuation">[</span> y <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> Ans<span class="token punctuation">,</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">==</span> y <span class="token punctuation">)</span> <span class="token keyword">return</span> Ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> MaxLog <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">!=</span> D<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> Ans<span class="token punctuation">,</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            Ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> Ans<span class="token punctuation">,</span> D<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> D<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    Ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> Ans<span class="token punctuation">,</span> D<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> Ans<span class="token punctuation">,</span> D<span class="token punctuation">[</span> y <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Used <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Start<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AddEdge</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AddEdge</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token function">Build</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Build_</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> INF <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>q <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">Query</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="参考代码（「CQOI2016」不同的最小割）"><a href="#参考代码（「CQOI2016」不同的最小割）" class="headerlink" title="参考代码（「CQOI2016」不同的最小割）"></a>参考代码（「CQOI2016」不同的最小割）</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">860</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxm <span class="token operator">=</span> <span class="token number">8510</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> MaxLog <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> Q<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> P<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token keyword">int</span> Start<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Cur<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Next<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> To<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Flow<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> NowFlow<span class="token punctuation">[</span> Maxm <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Used<span class="token punctuation">;</span><span class="token keyword">int</span> Deep<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Dis<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> L<span class="token punctuation">,</span> R<span class="token punctuation">,</span> Queue<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">></span> Map<span class="token punctuation">;</span><span class="token keyword">int</span> Ans<span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">AddEdge</span><span class="token punctuation">(</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> z <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">++</span>Used<span class="token punctuation">;</span>    Next<span class="token punctuation">[</span> Used <span class="token punctuation">]</span> <span class="token operator">=</span> Start<span class="token punctuation">[</span> x <span class="token punctuation">]</span><span class="token punctuation">;</span>    To<span class="token punctuation">[</span> Used <span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>    Flow<span class="token punctuation">[</span> Used <span class="token punctuation">]</span> <span class="token operator">=</span> z<span class="token punctuation">;</span>    Start<span class="token punctuation">[</span> x <span class="token punctuation">]</span> <span class="token operator">=</span> Used<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function">Bfs</span><span class="token punctuation">(</span> <span class="token keyword">int</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span> T <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Deep<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Deep <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Dis<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Dis <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Deep<span class="token punctuation">[</span> S <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    L <span class="token operator">=</span> R <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Queue<span class="token punctuation">[</span> <span class="token operator">++</span>R <span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> L <span class="token operator">&lt;</span> R <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> u <span class="token operator">=</span> Queue<span class="token punctuation">[</span> <span class="token operator">++</span>L <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> t <span class="token operator">=</span> Start<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">=</span> Next<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> v <span class="token operator">=</span> To<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> Deep<span class="token punctuation">[</span> v <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            Deep<span class="token punctuation">[</span> v <span class="token punctuation">]</span> <span class="token operator">=</span> Deep<span class="token punctuation">[</span> u <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            Queue<span class="token punctuation">[</span> <span class="token operator">++</span>R <span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Deep<span class="token punctuation">[</span> T <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> Rest<span class="token punctuation">,</span> <span class="token keyword">int</span> T <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> u <span class="token operator">==</span> T <span class="token operator">||</span> Rest <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> Rest<span class="token punctuation">;</span>    <span class="token keyword">int</span> Ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>t <span class="token operator">=</span> Cur<span class="token punctuation">[</span> u <span class="token punctuation">]</span><span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">=</span> Next<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> v <span class="token operator">=</span> To<span class="token punctuation">[</span> t <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Deep<span class="token punctuation">[</span> v <span class="token punctuation">]</span> <span class="token operator">!=</span> Deep<span class="token punctuation">[</span> u <span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> v<span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span> Rest<span class="token punctuation">,</span> NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        NowFlow<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">;</span> NowFlow<span class="token punctuation">[</span> t <span class="token operator">^</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span>        Ans <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span> Rest <span class="token operator">-</span><span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Rest <span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">Dinic</span><span class="token punctuation">(</span> <span class="token keyword">int</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span> T <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> Ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span> NowFlow<span class="token punctuation">,</span> Flow<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Flow <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token function">Bfs</span><span class="token punctuation">(</span> S<span class="token punctuation">,</span> T <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span> Cur<span class="token punctuation">,</span> Start<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> S<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> d <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ans <span class="token operator">+</span><span class="token operator">=</span> d<span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token function">Dfs</span><span class="token punctuation">(</span> S<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> T <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Build</span><span class="token punctuation">(</span> <span class="token keyword">int</span> Left<span class="token punctuation">,</span> <span class="token keyword">int</span> Right <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Left <span class="token operator">>=</span> Right <span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">Dinic</span><span class="token punctuation">(</span> Q<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">,</span> Q<span class="token punctuation">[</span> Left <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span> t <span class="token punctuation">)</span> <span class="token operator">==</span> Map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>Ans<span class="token punctuation">;</span>        Map<span class="token punctuation">[</span> t <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Bfs</span><span class="token punctuation">(</span> Q<span class="token punctuation">[</span> Left <span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span>  Left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> Deep<span class="token punctuation">[</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>            P<span class="token punctuation">[</span> <span class="token operator">++</span>t <span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Cut <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>Deep<span class="token punctuation">[</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span>            P<span class="token punctuation">[</span> <span class="token operator">++</span>t <span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> Left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Right<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> P<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Build</span><span class="token punctuation">(</span> Left<span class="token punctuation">,</span> Cut <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Build</span><span class="token punctuation">(</span> Cut <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> Right <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Used <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> Start<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> Start <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">,</span> <span class="token operator">&amp;</span>z <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AddEdge</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AddEdge</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> x<span class="token punctuation">,</span> z <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token function">Build</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d\n"</span><span class="token punctuation">,</span> Ans <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;解决问题&lt;a href=&quot;https://loj.ac/problem/2042&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="网络流" scheme="http://chy-2003.github.io/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>多项式除法</title>
    <link href="http://chy-2003.github.io/2019/04/18/6/"/>
    <id>http://chy-2003.github.io/2019/04/18/6/</id>
    <published>2019-04-18T05:18:21.000Z</published>
    <updated>2019-04-20T14:45:01.886Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们知道对于多项式$A$和多项式$B$，有唯一的$Q$和$R$使得$A=QB+R$，其中$\deg R &lt; \deg B$。</p><p>多项式除法就是给定$A$和$B$，求$Q$和$R$。</p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>参考<a href="http://blog.miskcoo.com/2015/05/polynomial-division" target="_blank" rel="noopener">miskcoo大佬的博客</a></p><p>已知<br>$$<br>A(x)=Q(x)B(x)+R(x)<br>$$<br>其中$n=\deg A$，$m=\deg B$，且$m\leqslant n$。那么两边乘$x^n$就有<br>$$<br>x^nA(\frac{1}{x})=x^{n-m}Q(\frac{1}{x})x^mB(\frac{1}{x})+x^{n-m+1}x^{m-1}R(\frac{1}{x})<br>$$<br>而如果$\deg A=n$，那么$x^nA(\frac{1}{x})$就表示翻转系数（可以举个例子感受一下），可以记做$A^R(x)$。</p><p>而我们发现$\deg R \leqslant m-1$，如果$R$不足$m-1$次，就在高位补$0$。而同样的$Q$也可以这样。</p><p>所以上式可以写作：<br>$$<br>A^R(x)=Q^R(x)B^R(x)+x^{n-m+1}R^R(x)<br>$$<br>两边对$x^{n-m+1}$取模也没有影响：<br>$$<br>A^R(x)\equiv Q^R(x)B^R(x)(\mod x^{n-m+1})<br>$$<br>然后我们对$B^R$求逆就可以求出$Q^R$，翻转后回代即可。</p><h2 id="参考程序"><a href="#参考程序" class="headerlink" title="参考程序"></a>参考程序</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> LL Mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">const</span> LL MaxN <span class="token operator">=</span> <span class="token number">400010</span><span class="token punctuation">;</span>LL N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> Q<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> F<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> G<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>M <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>N<span class="token punctuation">;</span> <span class="token operator">++</span>M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>F<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>G<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">-</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%lld "</span><span class="token punctuation">,</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%lld "</span><span class="token punctuation">,</span> R<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">FastPow</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL Ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> y<span class="token punctuation">;</span> y <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> x <span class="token operator">*</span> x <span class="token operator">%</span> Mod <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span>            Ans <span class="token operator">=</span> Ans <span class="token operator">*</span> x <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> Ans<span class="token punctuation">;</span><span class="token punctuation">}</span>namespace Polynom <span class="token punctuation">{</span>    LL n<span class="token punctuation">,</span> Index<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> Omega<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> InvOmega<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span>    LL A<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> InvB<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> Mul<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span>    LL a<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span> LL N <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        Omega<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> Mod <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">/</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Omega<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        InvOmega<span class="token punctuation">[</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> Omega<span class="token punctuation">[</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span> InvOmega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> InvOmega<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Reverse</span><span class="token punctuation">(</span> LL <span class="token operator">*</span>A<span class="token punctuation">,</span> LL Len <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> Len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">NTT</span><span class="token punctuation">(</span> LL L<span class="token punctuation">,</span> LL <span class="token operator">*</span>A<span class="token punctuation">,</span> LL <span class="token operator">*</span>Omega <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> Index<span class="token punctuation">[</span> i <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> L <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span>                <span class="token function">swap</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL HalfLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> HalfLen <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>                 <span class="token keyword">for</span><span class="token punctuation">(</span> LL j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> HalfLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LL T <span class="token operator">=</span> Omega<span class="token punctuation">[</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> HalfLen <span class="token operator">*</span> j <span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                    LL t <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                    A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> t <span class="token operator">+</span> T <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                    A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> t <span class="token operator">-</span> T <span class="token operator">+</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Inverse</span><span class="token punctuation">(</span> LL Len<span class="token punctuation">,</span> LL <span class="token operator">*</span>A<span class="token punctuation">,</span> LL <span class="token operator">*</span>Ans <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> Len <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            Ans<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">Inverse</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> Len <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> A<span class="token punctuation">,</span> Ans <span class="token punctuation">)</span><span class="token punctuation">;</span>        LL len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> len <span class="token operator">&lt;</span> Len <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> a<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Ans<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> a<span class="token punctuation">,</span> Omega <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> b<span class="token punctuation">,</span> Omega <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">-</span> a<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>            b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">+</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> b<span class="token punctuation">,</span> InvOmega <span class="token punctuation">)</span><span class="token punctuation">;</span>        LL Inv <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>            b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> Inv <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> Len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memcpy</span><span class="token punctuation">(</span> Ans<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Multiply</span><span class="token punctuation">(</span> LL Len<span class="token punctuation">,</span> LL <span class="token operator">*</span>A<span class="token punctuation">,</span> LL <span class="token operator">*</span>B<span class="token punctuation">,</span> LL <span class="token operator">*</span>Ans <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> len <span class="token operator">&lt;</span> Len <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> A<span class="token punctuation">,</span> Omega <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> B<span class="token punctuation">,</span> Omega <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Ans<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> Ans<span class="token punctuation">,</span> InvOmega <span class="token punctuation">)</span><span class="token punctuation">;</span>        LL Inv <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> Ans<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Ans<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> Inv <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Division</span><span class="token punctuation">(</span> LL N<span class="token punctuation">,</span> LL M<span class="token punctuation">,</span> LL <span class="token operator">*</span>F<span class="token punctuation">,</span> LL <span class="token operator">*</span>G<span class="token punctuation">,</span> LL <span class="token operator">*</span>Q<span class="token punctuation">,</span> LL <span class="token operator">*</span>R <span class="token punctuation">)</span> <span class="token punctuation">{</span>        LL ModuleLen <span class="token operator">=</span> N <span class="token operator">-</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span> A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span> B<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> B <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">Reverse</span><span class="token punctuation">(</span> A<span class="token punctuation">,</span> N <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Reverse</span><span class="token punctuation">(</span> B<span class="token punctuation">,</span> M <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> ModuleLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> ModuleLen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">Inverse</span><span class="token punctuation">(</span> ModuleLen<span class="token punctuation">,</span> B<span class="token punctuation">,</span> InvB <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Multiply</span><span class="token punctuation">(</span> ModuleLen<span class="token punctuation">,</span> A<span class="token punctuation">,</span> InvB<span class="token punctuation">,</span> Q <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Reverse</span><span class="token punctuation">(</span> Q<span class="token punctuation">,</span> N <span class="token operator">-</span> M <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span> A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span> B<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> B <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">-</span> M <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Q<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">Multiply</span><span class="token punctuation">(</span> N<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> Mul <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> R<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> F<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">-</span> Mul<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">+</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//Polynom</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Polynom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Init</span><span class="token punctuation">(</span> N <span class="token punctuation">)</span><span class="token punctuation">;</span>    Polynom<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">Division</span><span class="token punctuation">(</span> N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> F<span class="token punctuation">,</span> G<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> R <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;我们知道对于多项式$A$和多项式$B$，有唯一的$Q$和$R$使得$A=QB+R$，其中$\deg R &amp;lt; \deg B$。&lt;/p&gt;

      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多项式" scheme="http://chy-2003.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多项式求逆</title>
    <link href="http://chy-2003.github.io/2019/04/17/5/"/>
    <id>http://chy-2003.github.io/2019/04/17/5/</id>
    <published>2019-04-17T06:18:06.000Z</published>
    <updated>2019-04-20T14:44:46.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>多项式求逆是多项式除法的基础。通过快速傅里叶变换和倍增，我们可以在$O(n \log n)$的复杂度内完成。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>定义$\deg A$表示多项式$A$的最高次数。</p><p>对于两个多项式$A$和$B$，有唯一的$A=QB+R$。其中$\deg R&lt;\deg B$。可以写成$A\equiv R(\mod B)$。</p><p>那么使$AA’\equiv 1(\mod x^n)$的$A’$为多项式$A$在$\mod x^n$意义下的逆元，其中$\deg A’ \leqslant \deg A$。可以记做$A^{-1}$。</p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>比较显然的是，当$n=1$时，$A\equiv c(\mod x^n)$,那么$A^{-1}=c^{-1}$。</p><p>当$n&gt;1$时，如果我们求出了$AA’\equiv 1(\mod x^{\lceil \frac{n}{2}\rceil})$，而因为$AA^{-1}\equiv1(\mod x^{\lceil \frac{n}{2}\rceil})$，那么一定有$AA^{-1}\equiv 1( \mod x^{\lceil \frac{n}{2}\rceil})$。</p><p>所以$A^{-1}-A’ \equiv 0(\mod x^{\lceil \frac{n}{2}\rceil})$。所以$(A^{-1})^2-2A^{-1}A’+(A’)^2\equiv 0 (\mod x^n)$。</p><p>乘上$A$，得到$A^{-1}-2A’+A(A’)^2\equiv 0(\mod x^n)$。所以$A^{-1}\equiv 2A’-A(A’)^2(\mod x^n)$。</p><p>时间复杂度为$O(n \log n)$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>实现的时候要注意细节。</p><p><a href="https://www.luogu.org/problemnew/show/P4238" target="_blank" rel="noopener">题目链接</a></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> LL Mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">const</span> LL MaxN <span class="token operator">=</span> <span class="token number">400010</span><span class="token punctuation">;</span>LL N<span class="token punctuation">,</span> n<span class="token punctuation">,</span> A<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span>LL Index<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> Omega<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> InvOmega<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span>LL a<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span> MaxN <span class="token punctuation">]</span><span class="token punctuation">;</span>LL <span class="token function">FastPow</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>y <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1LL</span><span class="token punctuation">;</span>    LL t <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> t <span class="token operator">=</span> t <span class="token operator">*</span> x <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Omega<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> Mod <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">/</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        Omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Omega<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    InvOmega<span class="token punctuation">[</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> Omega<span class="token punctuation">[</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>         InvOmega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> InvOmega<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%lld "</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">NTT</span><span class="token punctuation">(</span> LL L<span class="token punctuation">,</span> LL <span class="token operator">*</span>A<span class="token punctuation">,</span> LL <span class="token operator">*</span>Omega <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> Index<span class="token punctuation">[</span> i <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> L <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> Index <span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL HalfLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> HalfLen <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>             <span class="token keyword">for</span><span class="token punctuation">(</span> LL j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> HalfLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span> <span class="token punctuation">{</span>                LL T <span class="token operator">=</span> Omega<span class="token punctuation">[</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> HalfLen <span class="token operator">*</span> j <span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                LL t <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> t <span class="token operator">+</span> T <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> t <span class="token operator">-</span> T <span class="token operator">+</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">PolynomInverse</span><span class="token punctuation">(</span> LL Len <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> Len <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        B<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">PolynomInverse</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> Len <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    LL len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> len <span class="token operator">&lt;</span> Len <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> a<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> a<span class="token punctuation">,</span> Omega <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> b<span class="token punctuation">,</span> Omega <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">-</span> a<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">%</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>        b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">+</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">NTT</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> b<span class="token punctuation">,</span> InvOmega <span class="token punctuation">)</span><span class="token punctuation">;</span>    LL Inv <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> len<span class="token punctuation">,</span> Mod <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> Inv <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> Len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> b<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span> B<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">PolynomInverse</span><span class="token punctuation">(</span> N <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;多项式求逆是多项式除法的基础。通过快速傅里叶变换和倍增，我们可以在$O(n \log n)$的复杂度内完成。&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多项式" scheme="http://chy-2003.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速数论变换NTT</title>
    <link href="http://chy-2003.github.io/2019/04/16/4/"/>
    <id>http://chy-2003.github.io/2019/04/16/4/</id>
    <published>2019-04-16T10:33:08.000Z</published>
    <updated>2019-04-20T14:44:32.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果你没有看过<a href="../../13/2">快速傅里叶变换FFT</a>，那么建议先去了解一下再来看这篇文章。</p><p>首先恭喜你，<del>背出了FFT模板</del>学会了FFT。而我们发现，由于FFT所用的大量实数操作，有些时候无法满足精度需求。或者说，遇到模意义下的操作，FFT也无法满足需求。</p><p>所以就有了NTT。</p><h2 id="原根"><a href="#原根" class="headerlink" title="原根"></a>原根</h2><p>FFT能执行的原因就是巧妙地选择了单位复根。那么我们需要在模意义下找到单位复根的替代品。</p><p>我们首先看一看我们需要具有什么性质的数：</p><blockquote><p>1、$\omega_n^n=1$。</p><p>2、$\omega_n^0,\omega_n^1,…,\omega_n^{n-1}$互不相同。</p><p>3、$\omega_{kn}^{ki}=\omega_n^i$。</p><p>4、$\omega_n^k=-\omega_n^{k+\frac{n}{2}}$。</p><p>5、$\sum_{i=0}^{n-1}\omega_n^{ti}={\Large\{}\begin{matrix}0&amp;t\neq0\\n &amp; t=0\end{matrix}$。</p></blockquote><p><del>然而本蒟蒻太菜了，只能到处找资料。</del></p><p>下面的两项定义及原根的求法参考<a href="https://www.cnblogs.com/cytus/p/9296661.html" target="_blank" rel="noopener">https://www.cnblogs.com/cytus/p/9296661.html</a></p><p>首先我们定义阶：</p><p>若$m&gt;1$且$gcd(a,m)=1$，那么使得$a^r\equiv1(mod\,\,m)$的最小正整数$r$称为$a$对模$m$的阶，记做$\delta_m(a)$。</p><p>然后定义原根：</p><p>设$m$为正整数，$a$为整数，如果$\delta_m(a)=\phi(m)$，那么称$a$为模$m$的一个原根。</p><p>原根的求法：</p><p>设$\phi(m)=p_1^{e_1}p_2^{e_2}…p_n^{e_n}​$，若$g^{\frac{\phi(m)}{p_i}} \mod m \neq 1​$，那么$g​$是$m​$的一个原根。</p><p>常见的模数及其原根：<a href="http://blog.miskcoo.com/2014/07/fft-prime-table" target="_blank" rel="noopener">http://blog.miskcoo.com/2014/07/fft-prime-table</a></p><p>原根性质的证明可以参考<a href="https://www.cnblogs.com/zhouzhendong/p/Fast-Fourier-Transform.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhouzhendong/p/Fast-Fourier-Transform.html</a></p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> LL Mod <span class="token operator">=</span> <span class="token number">998244353</span><span class="token punctuation">;</span><span class="token keyword">const</span> LL Maxn <span class="token operator">=</span> <span class="token number">400010</span><span class="token punctuation">;</span>LL N<span class="token punctuation">,</span> M<span class="token punctuation">,</span> TotalLen<span class="token punctuation">,</span> L<span class="token punctuation">;</span>LL A<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span>LL Index<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> Omega<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> Ch<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Exgcd</span><span class="token punctuation">(</span> LL a<span class="token punctuation">,</span> LL b<span class="token punctuation">,</span> LL <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> LL <span class="token operator">&amp;</span>y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Exgcd</span><span class="token punctuation">(</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">-</span><span class="token operator">=</span> a <span class="token operator">/</span> b <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">Inv</span><span class="token punctuation">(</span> LL a <span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token function">Exgcd</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> Mod<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> x <span class="token operator">+</span><span class="token operator">=</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span>LL <span class="token function">FastPow</span><span class="token punctuation">(</span> LL x<span class="token punctuation">,</span> LL y <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    LL t <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> y <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> t <span class="token operator">=</span> t <span class="token operator">*</span> x <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> Ch <span class="token punctuation">)</span><span class="token punctuation">;</span>    N <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span> Ch <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Ch<span class="token punctuation">[</span> N <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%s"</span><span class="token punctuation">,</span> Ch <span class="token punctuation">)</span><span class="token punctuation">;</span>    M <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span> Ch <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Ch<span class="token punctuation">[</span> M <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i <span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    TotalLen <span class="token operator">=</span> N <span class="token operator">+</span> M<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> L <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> L <span class="token operator">&lt;</span> TotalLen<span class="token punctuation">;</span> L <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> Index<span class="token punctuation">[</span> i <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> L <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    Omega<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">FastPow</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> Mod <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">/</span> L <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         Omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Omega<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">NTT</span><span class="token punctuation">(</span> LL <span class="token operator">*</span>A <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">></span> i <span class="token punctuation">)</span>            <span class="token function">swap</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL HalfLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> HalfLen <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> LL j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> HalfLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span> <span class="token punctuation">{</span>                LL T <span class="token operator">=</span> Omega<span class="token punctuation">[</span> L <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">/</span> HalfLen <span class="token operator">*</span> j <span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                    LL t <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> t <span class="token operator">+</span> T <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>                A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> t <span class="token operator">-</span> T <span class="token operator">+</span> Mod <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Inv</span><span class="token punctuation">(</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>        Omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> Omega<span class="token punctuation">[</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">*</span> Omega<span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LL INV <span class="token operator">=</span> <span class="token function">Inv</span><span class="token punctuation">(</span> L <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> INV <span class="token operator">%</span> Mod<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> L<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">[</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> L <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>A<span class="token punctuation">[</span> L <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">--</span>L<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> LL i <span class="token operator">=</span> L<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%lld"</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NTT</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">NTT</span><span class="token punctuation">(</span> B <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">NTT</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果你没有看过&lt;a href=&quot;../../13/2&quot;&gt;快速傅里叶变换FFT&lt;/a&gt;，那么建议先去了解一下再来看这篇文章。&lt;/p&gt;
&lt;p&gt;首
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多项式" scheme="http://chy-2003.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多项式学习</title>
    <link href="http://chy-2003.github.io/2019/04/16/3/"/>
    <id>http://chy-2003.github.io/2019/04/16/3/</id>
    <published>2019-04-16T10:15:25.000Z</published>
    <updated>2019-04-18T05:48:59.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速傅里叶变换FFT"><a href="#快速傅里叶变换FFT" class="headerlink" title="快速傅里叶变换FFT"></a><a href="../../13/2/">快速傅里叶变换FFT</a></h1><h1 id="快速数论变换NTT"><a href="#快速数论变换NTT" class="headerlink" title="快速数论变换NTT"></a><a href="../4/">快速数论变换NTT</a></h1><h1 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a><a href="../../17/5/">多项式求逆</a></h1><h1 id="多项式除法"><a href="#多项式除法" class="headerlink" title="多项式除法"></a><a href="../../18/6/">多项式除法</a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速傅里叶变换FFT&quot;&gt;&lt;a href=&quot;#快速傅里叶变换FFT&quot; class=&quot;headerlink&quot; title=&quot;快速傅里叶变换FFT&quot;&gt;&lt;/a&gt;&lt;a href=&quot;../../13/2/&quot;&gt;快速傅里叶变换FFT&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;快速数论变换N
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多项式" scheme="http://chy-2003.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>快速傅里叶变换FFT</title>
    <link href="http://chy-2003.github.io/2019/04/13/2/"/>
    <id>http://chy-2003.github.io/2019/04/13/2/</id>
    <published>2019-04-13T14:13:54.000Z</published>
    <updated>2019-04-20T14:44:13.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>听说FFT是个很有用的东西，于是本菜鸡就<del>去背了模板</del>尝试着看了一下。这里写下菜鸡版教程。</p><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>FFT主要用于求卷积。然而卷积是什么？</p><p>如果$f$是一个$n$次多项式，$g$是$m$次多项式，那么它们的卷积<br>$$<br>h(x)=f(x)g(x)=\sum_{i=0}^n\sum_{j=0}^mf_ig_jx^{i+j}=\sum_{i=0}^{n+m}\sum_{j=0}^if_{i-j}g_jx^i<br>$$<br>我们冷静分析一波，发现这就是个多项式乘法……</p><p>一般情况下，求卷积的时间复杂度是$O(n^2)$的。我们尝试加速这一过程。</p><h2 id="点值表达与离散傅里叶变换"><a href="#点值表达与离散傅里叶变换" class="headerlink" title="点值表达与离散傅里叶变换"></a>点值表达与离散傅里叶变换</h2><p>一般的，一个多项式可以表示为<br>$$<br>A(x)=a_0+a_1x+a_2x^2+…+a_nx^n<br>$$<br>这叫系数表示。</p><p>而一个$n$次多项式可以由$n+1$个互不相同的$(x,A(x))$唯一确定，其中<br>$$<br>A(x)=\{(x_0,A(x_0)),(x_1,A(x_1)),…,(x_n,A(x_n))\}<br>$$<br>叫做点值表示。</p><p>然后我们发现，点值表达有一个非常厉害的地方（$A$是$n$次多项式，$B$是$m$次多项式）：<br>$$<br>A(x)=\{(x_0,A(x_0)),(x_1,A(x_1)),…,(x_{n+m},A(x_{n+m}))\}\\<br>B(x)=\{(x_0,B(x_0)),(x_1,B(x_1)),…,(x_{n+m},B(x_{n+m}))\}\\<br>A(x)B(x)=\{(x_0,A(x_0)B(x_0)),(x_1,A(x_1)B(x_1)),…,(x_{n+m},A(x_{n+m})B(x_{n+m}))\}\\<br>$$<br>也就是说，我们可以在$O(n)$的时间内求出两个点值表达式相乘的结果！这可比先前的$O(n^2)$快了不少。</p><p>于是我们就想利用点值表达的这一特性来加速卷积过程。思路也很明显了：先将系数表示通过离散傅里叶变换（DFT）变成点值表示，求出乘积后，通过逆离散傅里叶变换（IDFT）转回系数表示。但是怎么进行DFT和IDFT呢？现在看来都是$O(n^2)$的……（IDFT通过拉格朗日插值实现，高斯消元是$O(n^3)$的）</p><h2 id="单位复根"><a href="#单位复根" class="headerlink" title="单位复根"></a>单位复根</h2><p>DFT的过程能降到$O(n\log n)$全靠单位复根。</p><p>$n$次单位复根是$n$个互不相同的$\omega^n=1$的复数。它们在复平面中的位置恰好将单位圆$n$等分。它们分别是$\omega_n^t=\cos \frac{2\pi t}{n}+i\sin\frac{2\pi t}{n}$，$t=0,1,…,n-1$。</p><p>$n=8$时差不多长这样：</p><p><img src="/2019/04/13/2/20190211102158.png" alt="图1"></p><p>结合图像，我们能得到一些显而易见的性质：<br>$$<br>\omega_{kn}^{ki}=\omega_n^i\\<br>\omega_n^i=-\omega_n^{i+\frac{n}{2}}<br>$$<br>然后我们就可以尝试DFT了。</p><h2 id="DFT"><a href="#DFT" class="headerlink" title="DFT"></a>DFT</h2><p>接下来，我们令$A$是一个$n$次多项式，$\deg A=n+1$。不妨将$\deg A$扩充到$2$的幂次。</p><p>要将$A$转成点值表示，我们需要取$\deg A$个值。</p><p>现在，我们要求$\overrightarrow{y}=(A(\omega_n^0),A(\omega_n^1),…,A(\omega_n^{n-1}))^T$。</p><p>令$A(x)=A^{[0]}(x^2)+xA^{[1]}(x^2)$（奇偶次项分开），我们可以得到：<br>$$<br>A(\omega_n^i)=A^{[0]}(\omega_n^{2i})+\omega_n^iA^{[1]}(\omega_n^{2i})=A^{[0]}(\omega_{\frac{n}{2}}^i)+\omega_n^iA^{[1]}(\omega_{\frac{n}{2}}^i)\\<br>A(\omega_n^{i+\frac{n}{2}})=A(-\omega_n^i)=A^{[0]}(\omega_{\frac{n}{2}}^i)-\omega_n^iA^{[1]}(\omega_{\frac{n}{2}}^i)<br>$$<br>所以求出<br>$$<br>\overrightarrow{y^{[0]}}=(A^{[0]}(\omega_{\frac{n}{2}}^0),A^{[0]}(\omega_{\frac{n}{2}}^1),…,A^{[0]}(\omega_{\frac{n}{2}}^{\frac{n}{2} - 1}))\\<br>\overrightarrow{y^{[1]}}=(A^{[1]}(\omega_{\frac{n}{2}}^0),A^{[1]}(\omega_{\frac{n}{2}}^1),…,A^{[1]}(\omega_{\frac{n}{2}}^{\frac{n}{2} - 1}))\\<br>\omega_n^i<br>$$<br>后就可以在$O(n)$时间内求出$\overrightarrow{y}$。这样的时间复杂度是$O(n\log n)$的。</p><h2 id="IDFT"><a href="#IDFT" class="headerlink" title="IDFT"></a>IDFT</h2><p>有了$\overrightarrow{y}$，求$A$的过程叫IDFT。我们现在令$A$的系数组成向量$\overrightarrow a$。</p><p>该过程即解方程<br>$$<br>\begin{aligned}<br>\begin{pmatrix}<br>1 &amp; \omega_n^0 &amp;… &amp; (\omega_n^0)^{n-1} \\<br>1 &amp; \omega_n^1 &amp;… &amp; (\omega_n^1)^{n-1} \\<br> &amp; &amp; … &amp; \\<br>1 &amp; \omega_n^{n-1} &amp; … &amp; (\omega_n^{n-1})^{n-1}<br>\end{pmatrix} \times \overrightarrow{a}=\overrightarrow{y}<br>\end{aligned}<br>$$<br>左边的系数矩阵是$n$阶的范德蒙德矩阵$V_n$。现在我们尝试求出$\overrightarrow{a}=V_n^{-1}\overrightarrow {y}$。</p><p>我们构造<br>$$<br>D_n=\begin{pmatrix}<br>1 &amp; (\omega_n^{0})^1 &amp; … &amp; (\omega_n^{0})^{n-1}\\<br>1 &amp; (\omega_n^{-1})^1 &amp; … &amp; (\omega_n^{-1})^{n-1}\\<br>&amp; &amp; … &amp; \\<br>1 &amp; (\omega_n^{-n+1})^1 &amp; … &amp; (\omega_n^{-n+1})^{n-1}<br>\end{pmatrix}<br>$$<br>那么<br>$$<br>(D_nV_n)_{i,j}=\sum_{k=0}^{n-1}D_{i,k}V_{k,j}=\sum_{k=0}^{n-1}(\omega_n^{-i})^k(\omega_n^k)^j=\sum_{k=0}^{n-1}\omega_n^{k(j-i)}<br>$$<br>而由于$j-i\in\{-n+1,n-1\}$，所以当$i=j$时，$(D_nV_n)_{i,j}=n$，否则$(D_nV_n)_{i,j}=\frac{1-(\omega_n^{j-i})^n}{1-\omega_n^{j-i}}=0$。</p><p>也就是说<br>$$<br>D_nV_n=nI_n<br>$$<br>所以<br>$$<br>V_n\overrightarrow{a}=\overrightarrow{y}\\<br>\Rightarrow\frac{1}{n}D_nV_n\overrightarrow{a}=\frac{1}{n}D_n\overrightarrow{y}\\<br>\Rightarrow\overrightarrow{a}=\frac{1}{n}D_n\overrightarrow{y}<br>$$<br>而我们发现DFT的过程实际上就是求<br>$$<br>\overrightarrow{y}=V_n\overrightarrow{a}<br>$$<br>所以只需要把DFT时$V_n$中的$\omega_n^i$换成$\omega_n^{-i}$即可(取虚部为相反数)。最后别忘了乘上$\frac{1}{n}$。</p><p>到此为止，已经可以写出递归版的FFT了。不过递归版的FFT常数比较大。我们来看进一步的优化：</p><h2 id="蝴蝶操作"><a href="#蝴蝶操作" class="headerlink" title="蝴蝶操作"></a>蝴蝶操作</h2><p>DFT时，我们要将系数奇偶分开。考虑递归过程中系数的变化：<br>$$<br>\begin{matrix}<br>0&amp;1&amp;2&amp;3&amp;4&amp;5&amp;6&amp;7\\<br>0&amp;2&amp;4&amp;6&amp;1&amp;3&amp;5&amp;7\\<br>0&amp;4&amp;2&amp;6&amp;1&amp;5&amp;3&amp;7<br>\end{matrix}<br>$$</p><p>$$<br>\begin{matrix}<br>000&amp;001&amp;010&amp;011&amp;100&amp;101&amp;110&amp;111\\<br>0&amp;1&amp;2 &amp;3&amp;4&amp;5&amp;6&amp;7\\<br>\\<br>0&amp;4&amp;2&amp;6&amp;1&amp;5&amp;3&amp;7\\<br>000&amp;100&amp;010&amp;110&amp;001&amp;101&amp;011&amp;111<br>\end{matrix}<br>$$</p><p>发现什么了吧。</p><p>我们可以先将系数放到对应的位置，然后从下往上一步步合并就可以了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p><a href="https://www.luogu.org/problemnew/show/P3803" target="_blank" rel="noopener">题目链接</a></p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LL long long</span><span class="token macro property">#<span class="token directive keyword">define</span> LD long double</span>using namespace std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Maxn <span class="token operator">=</span> <span class="token number">4000010</span><span class="token punctuation">;</span><span class="token keyword">const</span> LD Pi <span class="token operator">=</span> <span class="token number">3.14159265358979323846264</span><span class="token punctuation">;</span><span class="token keyword">struct</span> myComplex <span class="token punctuation">{</span>    LD real<span class="token punctuation">,</span> imag<span class="token punctuation">;</span>    myComplex operator <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> myComplex Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span> myComplex <span class="token punctuation">)</span> <span class="token punctuation">{</span> real <span class="token operator">+</span> Other<span class="token punctuation">.</span>real<span class="token punctuation">,</span> imag <span class="token operator">+</span> Other<span class="token punctuation">.</span>imag <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    myComplex operator <span class="token operator">-</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> myComplex Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span> myComplex <span class="token punctuation">)</span> <span class="token punctuation">{</span> real <span class="token operator">-</span> Other<span class="token punctuation">.</span>real<span class="token punctuation">,</span> imag <span class="token operator">-</span> Other<span class="token punctuation">.</span>imag <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    myComplex operator <span class="token operator">*</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> myComplex Other <span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span> myComplex <span class="token punctuation">)</span> <span class="token punctuation">{</span> real <span class="token operator">*</span> Other<span class="token punctuation">.</span>real <span class="token operator">-</span> imag <span class="token operator">*</span> Other<span class="token punctuation">.</span>imag<span class="token punctuation">,</span> real <span class="token operator">*</span> Other<span class="token punctuation">.</span>imag <span class="token operator">+</span> imag <span class="token operator">*</span> Other<span class="token punctuation">.</span>real <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> TotalLen<span class="token punctuation">,</span> N<span class="token punctuation">;</span><span class="token keyword">int</span> Index<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span>myComplex omega<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">,</span> B<span class="token punctuation">[</span> Maxn <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">FFT</span><span class="token punctuation">(</span> myComplex <span class="token operator">*</span>A <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         <span class="token keyword">if</span><span class="token punctuation">(</span> i <span class="token operator">&lt;</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span>             <span class="token function">swap</span><span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span> Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> HalfLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> HalfLen <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>         <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> HalfLen <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> HalfLen<span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span> <span class="token punctuation">{</span>                myComplex t <span class="token operator">=</span> omega<span class="token punctuation">[</span> <span class="token punctuation">(</span> N <span class="token operator">/</span> HalfLen <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">*</span> j <span class="token punctuation">]</span> <span class="token operator">*</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span><span class="token punctuation">;</span>                myComplex T <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span><span class="token punctuation">;</span>                A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token punctuation">]</span> <span class="token operator">=</span> T <span class="token operator">+</span> t<span class="token punctuation">;</span>                A<span class="token punctuation">[</span> i <span class="token operator">+</span> j <span class="token operator">+</span> HalfLen <span class="token punctuation">]</span> <span class="token operator">=</span> T <span class="token operator">-</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>m<span class="token punctuation">;</span> TotalLen <span class="token operator">=</span> n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%Lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>real <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">"%Lf"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>B<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>real <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> N <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> N <span class="token operator">&lt;=</span> TotalLen<span class="token punctuation">;</span> N <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         Index<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> Index<span class="token punctuation">[</span> i <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> i <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> N <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>         omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span> myComplex <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">cos</span><span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> Pi <span class="token operator">*</span> i <span class="token operator">/</span> N <span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span> <span class="token number">2.0</span> <span class="token operator">*</span> Pi <span class="token operator">*</span> i <span class="token operator">/</span> N <span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">FFT</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">FFT</span><span class="token punctuation">(</span> B <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">*</span> B<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>imag <span class="token operator">=</span> <span class="token operator">-</span>omega<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>imag<span class="token punctuation">;</span>    <span class="token function">FFT</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> TotalLen<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span> <span class="token punctuation">(</span> A<span class="token punctuation">[</span> i <span class="token punctuation">]</span><span class="token punctuation">.</span>real <span class="token operator">/</span> N <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">"\n"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;听说FFT是个很有用的东西，于是本菜鸡就&lt;del&gt;去背了模板&lt;/del&gt;尝试着看了一下。这里写下菜鸡版教程。&lt;/p&gt;
&lt;h2 id=&quot;卷积&quot;
      
    
    </summary>
    
      <category term="OI学习" scheme="http://chy-2003.github.io/categories/OI%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="多项式" scheme="http://chy-2003.github.io/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建一个这样的网站？</title>
    <link href="http://chy-2003.github.io/2019/04/13/1/"/>
    <id>http://chy-2003.github.io/2019/04/13/1/</id>
    <published>2019-04-13T06:21:37.000Z</published>
    <updated>2019-04-20T14:43:35.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>本文略过git或openshift或……部分，相信大家都会。</p><p>hexo 需要nodejs与npm。所以我们首先安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> apt <span class="token function">install</span> nodejs-legacy<span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">npm</span><span class="token function">sudo</span> <span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> n -g<span class="token function">sudo</span> n stable<span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>然后选择一个文件夹，运行</p><pre class=" language-shell"><code class="language-shell">hexo init</code></pre><p>你的网站就部署在这个文件夹下了！</p><p>然后安装一些可能需要的包：</p><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked --savenpm install hexo-renderer-stylus --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-archive --savenpm install https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>其中hexo-deployer中只需选一个你需要的。</p><p>然后在这个文件夹下试一试</p><pre class=" language-shell"><code class="language-shell">hexo ghexo s</code></pre><p>然后打开<code>127.0.0.1:4000</code>，看看是否成功呢？</p><h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>本博客选用<code>matery</code>主题。到<code>hexo</code>官网就可以找到&gt;_&lt;。</p><p>在<code>_config.yml</code>中找到<code>theme</code>，改成</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Extensions</span><span class="token comment" spellcheck="true">## Plugins: https://hexo.io/plugins/</span><span class="token comment" spellcheck="true">## Themes: https://hexo.io/themes/</span><span class="token key atrule">theme</span><span class="token punctuation">:</span> matery</code></pre><p>即可。</p><p>有关主题的更多内容请参考<code>theme/matery/README_CN.md</code>，这里不再赘述。</p><h2 id="数学公式支持"><a href="#数学公式支持" class="headerlink" title="数学公式支持"></a>数学公式支持</h2><p>其实前面的已经差不多了！</p><p>但是我们发现不能像<code>typora</code>中那样使用数学公式。</p><p>然后我用了$\infty$的时间去尝试着使用KaTeX渲染和使用Markdown支持渲染。然后嘛，最后虽然算是成功渲染了，但是好像不是那么正确……</p><p>之后就当我打算放弃使用图片时，突然发现<code>themes/matery/_config.yml</code>中有这么一段话：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Whether to activate the mathjax, this is a global configuration, but the post still does not open the mathjax rendering.</span><span class="token comment" spellcheck="true"># Considering that the mathjax loading is time consuming,</span><span class="token comment" spellcheck="true"># you also need to add `mathjax: true` to the Front-matter of the post that needs to be rendered.</span><span class="token comment" spellcheck="true"># 是否激活mathjax数学公式，这是全局配置，但文章仍然不会都开启mathjax渲染，</span><span class="token comment" spellcheck="true"># 考虑到mathjax加载比较耗时，你还需要在需要渲染的文章的Front-matter中再加上`mathjax: true`才行.</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.bootcss.com/mathjax/2.7.5/MathJax.js<span class="token punctuation">?</span>config=TeX<span class="token punctuation">-</span>AMS<span class="token punctuation">-</span>MML_HTMLorMML</code></pre><p>那不是已经说得很清楚了嘛……先前我在干什么……</p><p>然后发现一点小小的问题，我们需要解决LaTeX与Html的冲突。</p><p>找到<code>node_modules\marked\lib\marked.js</code>，将其中</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">escape</span><span class="token punctuation">:</span> /^\\(<span class="token punctuation">[</span>\\`*<span class="token punctuation">{</span><span class="token punctuation">}</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span>()<span class="token comment" spellcheck="true"># +\-.!_>])/,</span><span class="token key atrule">em</span><span class="token punctuation">:</span> /^\b_((<span class="token punctuation">?</span><span class="token punctuation">:</span><span class="token punctuation">[</span>^_<span class="token punctuation">]</span><span class="token punctuation">|</span>__)+<span class="token punctuation">?</span>)_\b<span class="token punctuation">|</span>^\*((<span class="token punctuation">?</span><span class="token punctuation">:</span>\*\*<span class="token punctuation">|</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span>)+<span class="token punctuation">?</span>)\*(<span class="token punctuation">?</span><span class="token tag">!\*)/,</span></code></pre><p>改为</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">escape</span><span class="token punctuation">:</span> /^\\(<span class="token punctuation">[</span>`*\<span class="token punctuation">[</span>\<span class="token punctuation">]</span>()<span class="token comment" spellcheck="true"># +\-.!_>])/,</span><span class="token key atrule">em</span><span class="token punctuation">:</span> /^\*((<span class="token punctuation">?</span><span class="token punctuation">:</span>\*\*<span class="token punctuation">|</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span>)+<span class="token punctuation">?</span>)\*(<span class="token punctuation">?</span><span class="token tag">!\*)/,</span></code></pre><p>即可。</p><h2 id="使用技巧和hexo相关操作"><a href="#使用技巧和hexo相关操作" class="headerlink" title="使用技巧和hexo相关操作"></a>使用技巧和hexo相关操作</h2><p>hexo常用的指令有：</p><pre class=" language-shell"><code class="language-shell">hexo clean     #清除db.json与public里面的内容hexo new file  #在source/_post下面新建一个file.md文件hexo g         #由md文件生成html静态文件hexo s         #在本地启动http服务以提供本地预览功能hexo d         #发布到GitHub</code></pre><p>建议将<code>_config.yml</code>中的<code>post_asset_folder: false</code>改为<code>true</code>。这样新建文章的时候就会同时新建一个同名文件夹，就可以把需要的东西都放进文件夹里，方便管理。</p><hr><p>以下是相关测试：</p><h2 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h2><p><strong>粗体</strong> <del>划线</del> _斜体_</p><h3 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h3><h4 id="多级标题-1"><a href="#多级标题-1" class="headerlink" title="多级标题"></a>多级标题</h4><blockquote><p>引用</p></blockquote><p><img src="/2019/04/13/1/1.jpg" alt="1"></p><p><img src="/2019/04/13/1/1.gif" alt="2"></p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//代码块</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p><p><a href="1.zip">下载测试</a></p><p>公式测试<br>$$<br>{ \sum_{i=1}^{n} i } = \frac{n\times(n+1)}{2} = \frac{ n ^ {2} + n}{2}<br>$$</p><p>行内公式测试$\sum\limits_{i=1}^{n}i = \frac{n\times(n+1)}{2}$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h2&gt;&lt;p&gt;本文略过git或openshift或……部分，相信大家都会。&lt;/p&gt;
&lt;p&gt;hexo 需要nodejs与np
      
    
    </summary>
    
      <category term="经验&amp;教程" scheme="http://chy-2003.github.io/categories/%E7%BB%8F%E9%AA%8C-%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="http://chy-2003.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
